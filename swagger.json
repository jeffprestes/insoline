{
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "https://api.mythx.io/v1"
    }
  ],
  "info": {
    "version": "v1.4",
    "title": "MythX API",
    "x-logo": {
      "url": "https://mythx.io/static/img/mythxlogo.svg"
    },
    "description": "[MythX](https://mythx.io) is a security analysis API for Ethereum\nsmart contracts. It powers tools that bring security into the\nsmart contract SDLC.\n\nJoin the MythX community at [MythX\nDiscord](https://discord.gg/kktn8Wt) for more information.\n\nThis document describes the API interface to MythX. It is entended\nfor Dapp developers who wish to bring the power MythX to their\nDapps.\n\n# API Authentication Methods\n\nMythX API implements [JWT](#section/API-Authentication-Methods/JWT) and\n[MetaMask](#section/API-Authentication-Methods/MetaMask) authentication schemes.\nFor better security user credentials (User ID / Ethereum address / email +\npassword) are only used to start JWT sessions\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# User Roles and Permissions\n\n## Overview\n\nMythX user roles and permissions are string tokens recognized by API server,\nand utilized to control user access to different API functionalities, as well\nas to alter API behavior for user with different rights.\n\nUser roles assigned to each user can be found inside the `roles` array of user\nobject (see [GET /users/{id}](#operation/getUserById)). Each role represents a\nset of user permissions. The exact mapping between roles and permissions is\nstored server-side and may be changed as needed, thus allowing to tune API\nbehavior for users with certain roles without chaning user roles.\n\nWhen a user hits API, his roles are mapped into sets of permissions that\ncorrespond to these roles currently, and all these permissions are merged\ninto a single permissions set. Endpoint controllers then check as necessary\nfor the presence of required permissions in that set, to decide how different\nfeatures should work for the user, or whether corresponding functionality\nshould work for the user at all. To check permissions currently granted to\nthe user by his roles use\n[GET /users/{id}/permissions](#operation/getUserPermissions).\n\nWhen a new [JWT session](#section/API-Authentication-Methods/JWT) is opened\nby [POST /auth/login](#operation/login), it is possible to narrow down user\npermissions allowed for that session. For example, it allows to use JWT tokens\nas API keys for tools, that only allow to run analyses, and retrieve their\nresults, but do not allow to modify user details, etc. To check user\npermissions requested, and granted in the current JWT session see\n[GET /auth/session/permissions](#operation/getSessionPermissions).\n\nFor convenience, [GET /auth/login](#operation/login) and\n[GET /auth/refresh](#operation/loginRefresh) endpoints also return\ninformation on the permissions.\n\n## Valid User Permissions\n\n**MythX Usage Allowances**\n- `ALL_SWC_LOOKUP` - Allows to see issues with all SWCs. Without this\n  permission only issues from a limited subset of SWC will be returned\n  to the user, along with a warning issue.\n- `ANALYSIS_ALLOWANCE_MINIMAL` - Up to 1k analyses any 24h period.\n- `ANALYSIS_ALLOWANCE_PREMIUM` - Up to 10k analyses any 24 period.\n- `FULL_ANALYSIS` - Allows to run analyses in the `full` mode.\n- `NO_CACHE_LOOKUP` - Allows to use `noCacheLookup` option in analysis\n  requests.\n- `PARALLEL_ANALYSIS_REQUESTS_UNLIMITED` - Allows to queue unlimited number\n  of unfinished analyses.\n- `ANALYSES_LOOKUP_OWN` - Permits to look up your own past analyses, using\n  [GET /v1/analyses](#operation/listAnalyses).\n- `REQUEST_RATE_PER_IP` - Allows multiple users relying on the same MythX\n  account to have their usage limits to be applied on per-IP basis.\n- ~`ANALYSIS_ALLOWANCE_UNLIMITED`~ - Has no effect currently, and falls back\n  to up to 1k analyses any 24h period.\n- ~`SHARED_USER_REQUEST_RATE`~ - Replaced by `ANALYSIS_ALLOWANCE_*`\n  permissions.\n- ~`UNLIMITED_REQUEST_RATE`~ - Replaced by `ANALYSIS_ALLOWANCE_*`\n  permissions.\n\n**Account Management Permissions**\n- `CREATE_USERS_ADMIN` - Allows to create new users with `admin` role,\n  as well as grant / take this role for created accounts.\n- `CREATE_USERS_FREE` - Allows to create new users with the `Free` role,\n  as well as grant / take this role for created accounts.\n- `CREATE_USERS_PARTNER` - Allows to create new users with `parnter` role,\n  as well as grant / take this role for created accounts.\n- `CREATE_USERS_PREMIUM` - Allows to create new users with\n  the `Premium` role, as well as grant / take this role for created\n  accounts.\n- `CREATE_USERS_PROFESSIONAL` - Allows to create new users with\n  the `Professional` role, as well as grant / take this role for created\n  accounts.\n- `CREATE_USERS_TRUSTED` - Allows to create new users with\n  the `trusted_user` role, as well as grant / take this role for created\n  accounts.\n- `CREATE_USERS_WITHOUT_ROLES` - Allows to create new user accounts.\n- `CHANGE_PASSWORD_OWN` - Permits to change your own user password.\n- `USER_LOOKUP` - Allows to lookup accounts of other users.\n\n**Misc Permissions**\n- `USERS_ANALYSES_STATS_LOOKUP` - Allows to fetch internal stats on MythX\n  usage and performance.\n"
  },
  "paths": {
    "/auth/challenge": {
      "get": {
        "operationId": "getAuthChallenge",
        "summary": "Auth challenge",
        "tags": [
          "Authentication Calls"
        ],
        "description": "Generates authentication challenge.\n\nAt least one of query parameters must be provided, and it will determine\nthe type of challenge to generate. Currently, only challenges based on\nEthereum address of the user are supported, for\n[MetaMask](#section/API-Authentication-Methods/MetaMask) authentication scheme.\nAdditional challenge types might be added in future.\n\n**Challenge Types**\n\n- Challenge based on Ethereum address. Generated when **ethAddress**\n  query parameter is provided.\n",
        "parameters": [
          {
            "name": "ethAddress",
            "in": "query",
            "description": "A valid Ethereum address.",
            "schema": {
              "type": "string",
              "format": "Ethereum address"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the challenge to generate.\n\n- **one_time** allows just a single use of challenge response for\n  authentication of a subsequent API call, within 10 minutes after\n  generation of the challenge. After the first use the challenge is\n  revoked. It is also revoked if not used within 10 minutes.\n\n- **short_lived** allows to use the challenge response unlimited\n  number of times within 10 minutes after the challenge generation.\n",
            "schema": {
              "type": "string",
              "enum": [
                "one_time",
                "short_lived"
              ],
              "default": "one_time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns two objects describing the banner to be shown in the MetaMask\ndialog and the challenge hash.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "data type of the element, string for both"
                      },
                      "name": {
                        "type": "string",
                        "description": "name of the element, one of banner or challenge"
                      },
                      "value": {
                        "type": "string",
                        "description": "value of the element, banner text or challenge hash"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "login",
        "summary": "API login",
        "tags": [
          "Authentication Calls"
        ],
        "security": [
          {
            "none": []
          },
          {
            "MetaMask": []
          }
        ],
        "description": "Generates a pair of access and refresh JWT tokens for\n[JWT authentication scheme](#section/API-Authentication-Methods/JWT).\n\nSupports the following modes of operation:\n\n- **MetaMask login** -\n  use [MetaMask authentication](#section/API-Authentication-Methods/MetaMask) to\n  get JWT tokens. Does not require any body parameters.\n\n- **User credentials login** - Login by username and password, where\n  the username can be either of: Ethereum address, a verified email\n  address, or user ID.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Login with User Credentials",
                    "required": [
                      "password"
                    ],
                    "properties": {
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "User password.\n\nA valid password is:\n- Between 8 and 64 symbols long (both inclusive);\n- Contains at least one lowercase (a-z) and uppercase (A-Z) letter;\n- Contains at least one digit (0-9);\n- Contains at least one of these symbols:\n  ```\n  `~!@#$%^&*()-_=+[{}]\\|;:'\",<.>/?€£¥₹\n  ```\n- Does not contain whitespaces.\n\nThese rules are validated by\n[password-validator](https://www.npmjs.com/package/password-validator)\nusing the following schema:\n```js\nconst MIN_PASSWORD_LENGTH = 8;\nconst MAX_PASSWORD_LENGTH = 64;\nconst passwordSchema = new PasswordValidator();\n  passwordSchema\n    .is().min(MIN_PASSWORD_LENGTH)\n    .is().max(MAX_PASSWORD_LENGTH)\n    .has().uppercase()\n    .has().lowercase()\n    .has().digits()\n    .has().symbols()\n    .has().not().spaces();\n```\n"
                      },
                      "username": {
                        "type": "string",
                        "description": "User identifier. Can be either of:\n- User Ethereum address;\n- A verified user email;\n- MythX user ID.\n"
                      },
                      "jwtLifetimes": {
                        "type": "object",
                        "description": "Custom JWT session lifetimes.\n\n**Beware:** Longer JWT lifetimes decrease session security.\n",
                        "properties": {
                          "access": {
                            "type": "string",
                            "format": "zeit/ms",
                            "default": "10 mins",
                            "description": "Access token lifetime."
                          },
                          "refresh": {
                            "type": "string",
                            "format": "zeit/ms",
                            "default": "3 days",
                            "description": "Refresh token lifetime."
                          }
                        }
                      },
                      "permissions": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "ANALYSIS_ALLOWANCE_MINIMAL",
                            "ANALYSIS_ALLOWANCE_PREMIUM",
                            "ANALYSES_LOOKUP_OWN",
                            "CHANGE_PASSWORD_OWN",
                            "CREATE_USERS_ADMIN",
                            "CREATE_USERS_FREE",
                            "CREATE_USERS_PARTNER",
                            "CREATE_USERS_PREMIUM",
                            "CREATE_USERS_PROFESSIONAL",
                            "CREATE_USERS_TRUSTED",
                            "CREATE_USERS_WITHOUT_ROLES",
                            "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                            "REQUEST_RATE_PER_IP",
                            "USER_LOOKUP",
                            "USERS_ANALYSES_STATS_LOOKUP"
                          ]
                        },
                        "description": "User permissions. For details see\n[User Roles and Permission](#section/User-Roles-and-Permissions).\n"
                      },
                      "ethAddress": {
                        "deprecated": true,
                        "type": "string",
                        "description": "An alias of `username` for backward compatibility."
                      },
                      "userId": {
                        "deprecated": true,
                        "type": "string",
                        "description": "An alias of `username` for backward compatibility."
                      }
                    }
                  },
                  {
                    "type": "object",
                    "nullable": true,
                    "title": "Login with MetaMask",
                    "properties": {
                      "jwtLifetimes": {
                        "type": "object",
                        "description": "Custom JWT session lifetimes.\n\n**Beware:** Longer JWT lifetimes decrease session security.\n",
                        "properties": {
                          "access": {
                            "type": "string",
                            "format": "zeit/ms",
                            "default": "10 mins",
                            "description": "Access token lifetime."
                          },
                          "refresh": {
                            "type": "string",
                            "format": "zeit/ms",
                            "default": "3 days",
                            "description": "Refresh token lifetime."
                          }
                        }
                      },
                      "permissions": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "ANALYSIS_ALLOWANCE_MINIMAL",
                            "ANALYSIS_ALLOWANCE_PREMIUM",
                            "ANALYSES_LOOKUP_OWN",
                            "CHANGE_PASSWORD_OWN",
                            "CREATE_USERS_ADMIN",
                            "CREATE_USERS_FREE",
                            "CREATE_USERS_PARTNER",
                            "CREATE_USERS_PREMIUM",
                            "CREATE_USERS_PROFESSIONAL",
                            "CREATE_USERS_TRUSTED",
                            "CREATE_USERS_WITHOUT_ROLES",
                            "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                            "REQUEST_RATE_PER_IP",
                            "USER_LOOKUP",
                            "USERS_ANALYSES_STATS_LOOKUP"
                          ]
                        },
                        "description": "User permissions. For details see\n[User Roles and Permission](#section/User-Roles-and-Permissions).\n"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jwtTokens": {
                          "type": "object",
                          "title": "JWT Tokens",
                          "description": "Holds a pair of JWT authentication tokens.",
                          "properties": {
                            "access": {
                              "type": "string",
                              "description": "Access token. Valid for 10 minutes it permits to authenticate into API.\n"
                            },
                            "refresh": {
                              "type": "string",
                              "description": "Refresh token. Valid for one month it permits to refresh corresponding\naccess token.\n"
                            }
                          }
                        },
                        "permissions": {
                          "type": "object",
                          "description": "Holds user permissions.",
                          "properties": {
                            "owned": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "ANALYSIS_ALLOWANCE_MINIMAL",
                                  "ANALYSIS_ALLOWANCE_PREMIUM",
                                  "ANALYSES_LOOKUP_OWN",
                                  "CHANGE_PASSWORD_OWN",
                                  "CREATE_USERS_ADMIN",
                                  "CREATE_USERS_FREE",
                                  "CREATE_USERS_PARTNER",
                                  "CREATE_USERS_PREMIUM",
                                  "CREATE_USERS_PROFESSIONAL",
                                  "CREATE_USERS_TRUSTED",
                                  "CREATE_USERS_WITHOUT_ROLES",
                                  "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                                  "REQUEST_RATE_PER_IP",
                                  "USER_LOOKUP",
                                  "USERS_ANALYSES_STATS_LOOKUP"
                                ]
                              },
                              "description": "All permissions given to the user by his roles."
                            },
                            "requested": {
                              "type": "array",
                              "nullable": true,
                              "items": {
                                "type": "string",
                                "enum": [
                                  "ANALYSIS_ALLOWANCE_MINIMAL",
                                  "ANALYSIS_ALLOWANCE_PREMIUM",
                                  "ANALYSES_LOOKUP_OWN",
                                  "CHANGE_PASSWORD_OWN",
                                  "CREATE_USERS_ADMIN",
                                  "CREATE_USERS_FREE",
                                  "CREATE_USERS_PARTNER",
                                  "CREATE_USERS_PREMIUM",
                                  "CREATE_USERS_PROFESSIONAL",
                                  "CREATE_USERS_TRUSTED",
                                  "CREATE_USERS_WITHOUT_ROLES",
                                  "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                                  "REQUEST_RATE_PER_IP",
                                  "USER_LOOKUP",
                                  "USERS_ANALYSES_STATS_LOOKUP"
                                ]
                              },
                              "description": "Permissions requested for the current session. `null` value means that all\nowned permissions have been requested, and `[]` means that it has been\nrequested to open the session without any permissions.\n"
                            },
                            "granted": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "ANALYSIS_ALLOWANCE_MINIMAL",
                                  "ANALYSIS_ALLOWANCE_PREMIUM",
                                  "ANALYSES_LOOKUP_OWN",
                                  "CHANGE_PASSWORD_OWN",
                                  "CREATE_USERS_ADMIN",
                                  "CREATE_USERS_FREE",
                                  "CREATE_USERS_PARTNER",
                                  "CREATE_USERS_PREMIUM",
                                  "CREATE_USERS_PROFESSIONAL",
                                  "CREATE_USERS_TRUSTED",
                                  "CREATE_USERS_WITHOUT_ROLES",
                                  "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                                  "REQUEST_RATE_PER_IP",
                                  "USER_LOOKUP",
                                  "USERS_ANALYSES_STATS_LOOKUP"
                                ]
                              },
                              "description": "User permissions granted for this session. There is no\nguarantee that they stay the same during the session, as\nthey are re-evaluated on each API call, as an intersection\nbetween the array of pemissions requested upon the login,\nand the array of permissions granted to the user by his\nroles.\n"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "deprecated": true,
                          "description": "JWT access token."
                        },
                        "refresh": {
                          "type": "string",
                          "deprecated": true,
                          "description": "JWT refresh token."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "logout",
        "summary": "API logout",
        "tags": [
          "Authentication Calls"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Closes the current API session, revoking JWT access token that signs this request, and the corresponding refresh token. Optional **global** parameter allows to close all user's sessions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "global": {
                    "type": "boolean",
                    "default": false,
                    "description": "If **true** all JWT tokens associated with the user will be revoked."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "loginRefresh",
        "summary": "Refresh Auth Tokens",
        "tags": [
          "Authentication Calls"
        ],
        "description": "Generates a new pair of JWT authentication tokens (access and refresh),\nand revokes the current one. The new tokens will have the same lifetime\nand permissions as the old ones.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jwtTokens": {
                    "type": "object",
                    "title": "JWT Tokens",
                    "description": "Holds a pair of JWT authentication tokens.",
                    "properties": {
                      "access": {
                        "type": "string",
                        "description": "Access token. Valid for 10 minutes it permits to authenticate into API.\n"
                      },
                      "refresh": {
                        "type": "string",
                        "description": "Refresh token. Valid for one month it permits to refresh corresponding\naccess token.\n"
                      }
                    }
                  },
                  "permissions": {
                    "type": "object",
                    "description": "Holds user permissions.",
                    "properties": {
                      "owned": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "ANALYSIS_ALLOWANCE_MINIMAL",
                            "ANALYSIS_ALLOWANCE_PREMIUM",
                            "ANALYSES_LOOKUP_OWN",
                            "CHANGE_PASSWORD_OWN",
                            "CREATE_USERS_ADMIN",
                            "CREATE_USERS_FREE",
                            "CREATE_USERS_PARTNER",
                            "CREATE_USERS_PREMIUM",
                            "CREATE_USERS_PROFESSIONAL",
                            "CREATE_USERS_TRUSTED",
                            "CREATE_USERS_WITHOUT_ROLES",
                            "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                            "REQUEST_RATE_PER_IP",
                            "USER_LOOKUP",
                            "USERS_ANALYSES_STATS_LOOKUP"
                          ]
                        },
                        "description": "All permissions given to the user by his roles."
                      },
                      "requested": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                          "type": "string",
                          "enum": [
                            "ANALYSIS_ALLOWANCE_MINIMAL",
                            "ANALYSIS_ALLOWANCE_PREMIUM",
                            "ANALYSES_LOOKUP_OWN",
                            "CHANGE_PASSWORD_OWN",
                            "CREATE_USERS_ADMIN",
                            "CREATE_USERS_FREE",
                            "CREATE_USERS_PARTNER",
                            "CREATE_USERS_PREMIUM",
                            "CREATE_USERS_PROFESSIONAL",
                            "CREATE_USERS_TRUSTED",
                            "CREATE_USERS_WITHOUT_ROLES",
                            "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                            "REQUEST_RATE_PER_IP",
                            "USER_LOOKUP",
                            "USERS_ANALYSES_STATS_LOOKUP"
                          ]
                        },
                        "description": "Permissions requested for the current session. `null` value means that all\nowned permissions have been requested, and `[]` means that it has been\nrequested to open the session without any permissions.\n"
                      },
                      "granted": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "ANALYSIS_ALLOWANCE_MINIMAL",
                            "ANALYSIS_ALLOWANCE_PREMIUM",
                            "ANALYSES_LOOKUP_OWN",
                            "CHANGE_PASSWORD_OWN",
                            "CREATE_USERS_ADMIN",
                            "CREATE_USERS_FREE",
                            "CREATE_USERS_PARTNER",
                            "CREATE_USERS_PREMIUM",
                            "CREATE_USERS_PROFESSIONAL",
                            "CREATE_USERS_TRUSTED",
                            "CREATE_USERS_WITHOUT_ROLES",
                            "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                            "REQUEST_RATE_PER_IP",
                            "USER_LOOKUP",
                            "USERS_ANALYSES_STATS_LOOKUP"
                          ]
                        },
                        "description": "User permissions granted for this session. There is no\nguarantee that they stay the same during the session, as\nthey are re-evaluated on each API call, as an intersection\nbetween the array of pemissions requested upon the login,\nand the array of permissions granted to the user by his\nroles.\n"
                      }
                    }
                  },
                  "accessToken": {
                    "type": "string",
                    "deprecated": true,
                    "description": "JWT access token."
                  },
                  "refreshToken": {
                    "type": "string",
                    "deprecated": true,
                    "description": "JWT refresh token."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "jwtTokens": {
                          "type": "object",
                          "title": "JWT Tokens",
                          "description": "Holds a pair of JWT authentication tokens.",
                          "properties": {
                            "access": {
                              "type": "string",
                              "description": "Access token. Valid for 10 minutes it permits to authenticate into API.\n"
                            },
                            "refresh": {
                              "type": "string",
                              "description": "Refresh token. Valid for one month it permits to refresh corresponding\naccess token.\n"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "deprecated": true,
                          "description": "JWT access token."
                        },
                        "refresh": {
                          "type": "string",
                          "deprecated": true,
                          "description": "JWT refresh token."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/session/permissions": {
      "get": {
        "operationId": "getSessionPermissions",
        "summary": "Session Permissions",
        "tags": [
          "Authentication Calls"
        ],
        "security": [
          {
            "JWT": []
          }
        ],
        "description": "Retreives user permissions requested, and granted for the current JWT session.\nFor details see\n[User Roles and Permissions](#section/User-Roles-and-Permissions).\n",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Holds user permissions.",
                  "properties": {
                    "owned": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "ANALYSIS_ALLOWANCE_MINIMAL",
                          "ANALYSIS_ALLOWANCE_PREMIUM",
                          "ANALYSES_LOOKUP_OWN",
                          "CHANGE_PASSWORD_OWN",
                          "CREATE_USERS_ADMIN",
                          "CREATE_USERS_FREE",
                          "CREATE_USERS_PARTNER",
                          "CREATE_USERS_PREMIUM",
                          "CREATE_USERS_PROFESSIONAL",
                          "CREATE_USERS_TRUSTED",
                          "CREATE_USERS_WITHOUT_ROLES",
                          "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                          "REQUEST_RATE_PER_IP",
                          "USER_LOOKUP",
                          "USERS_ANALYSES_STATS_LOOKUP"
                        ]
                      },
                      "description": "All permissions given to the user by his roles."
                    },
                    "requested": {
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "type": "string",
                        "enum": [
                          "ANALYSIS_ALLOWANCE_MINIMAL",
                          "ANALYSIS_ALLOWANCE_PREMIUM",
                          "ANALYSES_LOOKUP_OWN",
                          "CHANGE_PASSWORD_OWN",
                          "CREATE_USERS_ADMIN",
                          "CREATE_USERS_FREE",
                          "CREATE_USERS_PARTNER",
                          "CREATE_USERS_PREMIUM",
                          "CREATE_USERS_PROFESSIONAL",
                          "CREATE_USERS_TRUSTED",
                          "CREATE_USERS_WITHOUT_ROLES",
                          "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                          "REQUEST_RATE_PER_IP",
                          "USER_LOOKUP",
                          "USERS_ANALYSES_STATS_LOOKUP"
                        ]
                      },
                      "description": "Permissions requested for the current session. `null` value means that all\nowned permissions have been requested, and `[]` means that it has been\nrequested to open the session without any permissions.\n"
                    },
                    "granted": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "ANALYSIS_ALLOWANCE_MINIMAL",
                          "ANALYSIS_ALLOWANCE_PREMIUM",
                          "ANALYSES_LOOKUP_OWN",
                          "CHANGE_PASSWORD_OWN",
                          "CREATE_USERS_ADMIN",
                          "CREATE_USERS_FREE",
                          "CREATE_USERS_PARTNER",
                          "CREATE_USERS_PREMIUM",
                          "CREATE_USERS_PROFESSIONAL",
                          "CREATE_USERS_TRUSTED",
                          "CREATE_USERS_WITHOUT_ROLES",
                          "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                          "REQUEST_RATE_PER_IP",
                          "USER_LOOKUP",
                          "USERS_ANALYSES_STATS_LOOKUP"
                        ]
                      },
                      "description": "User permissions granted for this session. There is no\nguarantee that they stay the same during the session, as\nthey are re-evaluated on each API call, as an intersection\nbetween the array of pemissions requested upon the login,\nand the array of permissions granted to the user by his\nroles.\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/analyses": {
      "get": {
        "tags": [
          "Security Analysis"
        ],
        "operationId": "listAnalyses",
        "summary": "List Past Analyses",
        "description": "Lists analyses visible to the user, at most 20 records a time,\nsorted by submission time from the most recent to the oldest\nones. Use **offset** query parameter for results pagination. Use\n**dateFrom** and **dateTo** query parameters to filter by analysis\nsubmission timestamps.\n\nDates are specified using ann [ISO 8601 Date](https://en.wikipedia.org/wiki/ISO_8601) string\n\nExample Date Strings\n--------------------\n* `2018-11-20`,\n* `2018-11-20T23:13:12`,\n* `2018-11-20T23:13:12+00:00`\n* `2018-11-20T23:13:12.177Z`\n",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset. Number of records to skip.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Submission time filter. Restricts results to analyses submitted after this time. Unset by default.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Submission time filter. Restricts results to analyses submitted before this time. Unset by default.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "analyses": {
                      "type": "array",
                      "description": "Up to 20 matching analysis after the **offset**.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "apiVersion": {
                            "type": "string",
                            "description": "MythX API version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                          },
                          "clientToolName": {
                            "type": "string",
                            "description": "The identifier of the mythx client the analyses was triggered with.\n"
                          },
                          "error": {
                            "type": "string",
                            "description": "Holds error message if analysis failed; absent otherwise.\n"
                          },
                          "harveyVersion": {
                            "type": "string",
                            "description": "Harvey core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                          },
                          "maruVersion": {
                            "type": "string",
                            "description": "Maru core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                          },
                          "mythrilVersion": {
                            "type": "string",
                            "description": "Mythril core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                          },
                          "queueTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The time [ms] from analysis submission to its execution start, or to\nthe present moment, if this analysis is still in the queue.\n"
                          },
                          "runTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The time [ms] from the start of analysis execution till its end.\nEquals zero, if this analysis is still in the queue.\n"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Queued",
                              "In progress",
                              "Finished",
                              "Error"
                            ],
                            "description": "Current status of the analysis."
                          },
                          "submittedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp of the analysis submission to the API."
                          },
                          "submittedBy": {
                            "type": "string",
                            "description": "ID of the submitter."
                          },
                          "uuid": {
                            "description": "Unique identifier of the analysis.",
                            "type": "string",
                            "format": "uuid"
                          },
                          "info": {
                            "type": "string",
                            "nullable": true,
                            "description": "An optional human-readable message from API."
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of matching analyses."
                    }
                  }
                },
                "example": {
                  "total": 2,
                  "analyses": [
                    {
                      "apiVersion": "v1.3.0",
                      "harveyVersion": "v0.1.0",
                      "maruVersion": "v0.2.0",
                      "mythrilVersion": "0.19.11",
                      "queueTime": 1,
                      "runTime": 300,
                      "status": "Running",
                      "submittedAt": "2019-01-10T01:29:38.410Z",
                      "submittedBy": "000008544b0aa00010a91111",
                      "uuid": "0680a1e2-b908-4c9a-a15b-636ef9b61486"
                    },
                    {
                      "apiVersion": "v1.3.0",
                      "harveyVersion": "v0.1.0",
                      "maruVersion": "v0.2.0",
                      "mythrilVersion": "0.19.11",
                      "queueTime": 0,
                      "runTime": 0,
                      "status": "Finished",
                      "submittedAt": "2019-01-10T01:28:56.551Z",
                      "submittedBy": "000008544b0aa00010a91111",
                      "uuid": "78e3e82b-869d-4df1-8acf-cb1161281b71"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Likely invalid schema in analysis-request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "example": {
                  "status": 400,
                  "error": "Bad Request"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "submitAnalysis",
        "summary": "Submit Smart Contract for analysis",
        "tags": [
          "Security Analysis"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "description": "Submits Solidity contract(s) for vulnerability analysis and returns\ncreated analysis record. It is possible to conduct a partial analysis \non a contract by only submitting its creation bytecode or its source code\nin their respective schema fields. **Fill out both fields to conduct a \ncomplete analysis**.\nThe _uuid_ field of the response should be used in subsequent calls to:\n\n* [GET /analyses/{uuid}](#operation/getAnalysis) and\n* [GET /analyses/{uuid}/issues](#operation/getAnalysisIssues) to\n\ncheck analysis status, metadata, and the list of detected issues.\n\nIn addition to the JSON fields listed below, we allow additional fields. For example, truffle artfics will have an additional `abi` attribute.\n\nThe request format is equivalent to the output of:\n```console\n$ solc --pretty-json --combined-json ast,bin,bin-runtime,srcmap,srcmap-runtime\n```\nwith the exception of the following field name changes which follow Truffe conventions:\n  * `bin` &rarr; `bytecode`\n  * `bin-runtime` &rarr; `deployedBytecode`\n  * `srcmap` &rarr; `sourceMap`\n  * `srcmap-runtime` &rarr; `deployedSourceMap`\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "complete": {
                  "summary": "Complete Analysis",
                  "value": {
                    "clientToolName": "Sample MythX Client",
                    "noCacheLookup": true,
                    "data": {
                      "bytecode": "0x6080604052602060405190810160405280600060010260001916600019168152506000906001610030929190610043565b5034801561003d57600080fd5b506100bb565b828054828255906000526020600020908101928215610085579160200282015b82811115610084578251829060001916905591602001919060010190610063565b5b5090506100929190610096565b5090565b6100b891905b808211156100b457600081600090555060010161009c565b5090565b90565b60d8806100c96000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063017a9105146044575b600080fd5b348015604f57600080fd5b50606c60048036038101908080359060200190929190505050608a565b60405180826000191660001916815260200191505060405180910390f35b600081815481101515609857fe5b9060005260206000200160009150905054815600a165627a7a72305820d1c4ab8874b5f3cc139613c225a5908ed916e813f5ccdf9a9de97ce28420ca090029",
                      "mainSource": "PublicStorageArray.sol",
                      "sources": {
                        "PublicStorageArray.sol": {
                          "source": "pragma solidity ^0.5.0;\\n\\ncontract PublicStorageArray {\\n    bytes32[] public states = [bytes32(0)];\\n}",
                          "ast": "{\\\"contracts\\\":{\\\"/tmp/test.sol:PublicStorageArray\\\":{}},\\\"sourceList\\\":[\\\"/tmp/test.sol\\\"],\\\"sources\\\":{\\\"/tmp/test.sol\\\":{\\\"AST\\\":{\\\"attributes\\\":{\\\"absolutePath\\\":\\\"/tmp/test.sol\\\",\\\"exportedSymbols\\\":{\\\"PublicStorageArray\\\":[9]}},\\\"children\\\":[{\\\"attributes\\\":{\\\"literals\\\":[\\\"solidity\\\",\\\"^\\\",\\\"0.5\\\",\\\".0\\\"]},\\\"id\\\":1,\\\"name\\\":\\\"PragmaDirective\\\",\\\"src\\\":\\\"0:23:0\\\"},{\\\"attributes\\\":{\\\"baseContracts\\\":[null],\\\"contractDependencies\\\":[null],\\\"contractKind\\\":\\\"contract\\\",\\\"documentation\\\":null,\\\"fullyImplemented\\\":true,\\\"linearizedBaseContracts\\\":[9],\\\"name\\\":\\\"PublicStorageArray\\\",\\\"scope\\\":10},\\\"children\\\":[{\\\"attributes\\\":{\\\"constant\\\":false,\\\"name\\\":\\\"states\\\",\\\"scope\\\":9,\\\"stateVariable\\\":true,\\\"storageLocation\\\":\\\"default\\\",\\\"type\\\":\\\"bytes32[]\\\",\\\"visibility\\\":\\\"public\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"length\\\":null,\\\"type\\\":\\\"bytes32[]\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"name\\\":\\\"bytes32\\\",\\\"type\\\":\\\"bytes32\\\"},\\\"id\\\":2,\\\"name\\\":\\\"ElementaryTypeName\\\",\\\"src\\\":\\\"59:7:0\\\"}],\\\"id\\\":3,\\\"name\\\":\\\"ArrayTypeName\\\",\\\"src\\\":\\\"59:9:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isInlineArray\\\":true,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"bytes32[1] memory\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"isStructConstructorCall\\\":false,\\\"lValueRequested\\\":false,\\\"names\\\":[null],\\\"type\\\":\\\"bytes32\\\",\\\"type_conversion\\\":true},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":[{\\\"typeIdentifier\\\":\\\"t_rational_0_by_1\\\",\\\"typeString\\\":\\\"int_const 0\\\"}],\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"type(bytes32)\\\",\\\"value\\\":\\\"bytes32\\\"},\\\"id\\\":4,\\\"name\\\":\\\"ElementaryTypeNameExpression\\\",\\\"src\\\":\\\"86:7:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"hexvalue\\\":\\\"30\\\",\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"subdenomination\\\":null,\\\"token\\\":\\\"number\\\",\\\"type\\\":\\\"int_const 0\\\",\\\"value\\\":\\\"0\\\"},\\\"id\\\":5,\\\"name\\\":\\\"Literal\\\",\\\"src\\\":\\\"94:1:0\\\"}],\\\"id\\\":6,\\\"name\\\":\\\"FunctionCall\\\",\\\"src\\\":\\\"86:10:0\\\"}],\\\"id\\\":7,\\\"name\\\":\\\"TupleExpression\\\",\\\"src\\\":\\\"85:12:0\\\"}],\\\"id\\\":8,\\\"name\\\":\\\"VariableDeclaration\\\",\\\"src\\\":\\\"59:38:0\\\"}],\\\"id\\\":9,\\\"name\\\":\\\"ContractDefinition\\\",\\\"src\\\":\\\"25:75:0\\\"}],\\\"id\\\":10,\\\"name\\\":\\\"SourceUnit\\\",\\\"src\\\":\\\"0:102:0\\\"}}},\\\"version\\\":\\\"0.5.0+commit.1d4f565a.Linux.g++\\\"}"
                        }
                      }
                    }
                  }
                },
                "bytecode-only": {
                  "summary": "Bytecode Only",
                  "value": {
                    "data": {
                      "bytecode": "0x6080604052602060405190810160405280600060010260001916600019168152506000906001610030929190610043565b5034801561003d57600080fd5b506100bb565b828054828255906000526020600020908101928215610085579160200282015b82811115610084578251829060001916905591602001919060010190610063565b5b5090506100929190610096565b5090565b6100b891905b808211156100b457600081600090555060010161009c565b5090565b90565b60d8806100c96000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063017a9105146044575b600080fd5b348015604f57600080fd5b50606c60048036038101908080359060200190929190505050608a565b60405180826000191660001916815260200191505060405180910390f35b600081815481101515609857fe5b9060005260206000200160009150905054815600a165627a7a72305820d1c4ab8874b5f3cc139613c225a5908ed916e813f5ccdf9a9de97ce28420ca090029"
                    }
                  }
                },
                "sources-only": {
                  "summary": "Sources Only",
                  "value": {
                    "data": {
                      "mainSource": "PublicStorageArray.sol",
                      "sources": {
                        "PublicStorageArray.sol": {
                          "source": "pragma solidity ^0.5.0;\\n\\ncontract PublicStorageArray {\\n    bytes32[] public states = [bytes32(0)];\\n}",
                          "ast": "{\\\"contracts\\\":{\\\"/tmp/test.sol:PublicStorageArray\\\":{}},\\\"sourceList\\\":[\\\"/tmp/test.sol\\\"],\\\"sources\\\":{\\\"/tmp/test.sol\\\":{\\\"AST\\\":{\\\"attributes\\\":{\\\"absolutePath\\\":\\\"/tmp/test.sol\\\",\\\"exportedSymbols\\\":{\\\"PublicStorageArray\\\":[9]}},\\\"children\\\":[{\\\"attributes\\\":{\\\"literals\\\":[\\\"solidity\\\",\\\"^\\\",\\\"0.5\\\",\\\".0\\\"]},\\\"id\\\":1,\\\"name\\\":\\\"PragmaDirective\\\",\\\"src\\\":\\\"0:23:0\\\"},{\\\"attributes\\\":{\\\"baseContracts\\\":[null],\\\"contractDependencies\\\":[null],\\\"contractKind\\\":\\\"contract\\\",\\\"documentation\\\":null,\\\"fullyImplemented\\\":true,\\\"linearizedBaseContracts\\\":[9],\\\"name\\\":\\\"PublicStorageArray\\\",\\\"scope\\\":10},\\\"children\\\":[{\\\"attributes\\\":{\\\"constant\\\":false,\\\"name\\\":\\\"states\\\",\\\"scope\\\":9,\\\"stateVariable\\\":true,\\\"storageLocation\\\":\\\"default\\\",\\\"type\\\":\\\"bytes32[]\\\",\\\"visibility\\\":\\\"public\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"length\\\":null,\\\"type\\\":\\\"bytes32[]\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"name\\\":\\\"bytes32\\\",\\\"type\\\":\\\"bytes32\\\"},\\\"id\\\":2,\\\"name\\\":\\\"ElementaryTypeName\\\",\\\"src\\\":\\\"59:7:0\\\"}],\\\"id\\\":3,\\\"name\\\":\\\"ArrayTypeName\\\",\\\"src\\\":\\\"59:9:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isInlineArray\\\":true,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"bytes32[1] memory\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"isStructConstructorCall\\\":false,\\\"lValueRequested\\\":false,\\\"names\\\":[null],\\\"type\\\":\\\"bytes32\\\",\\\"type_conversion\\\":true},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":[{\\\"typeIdentifier\\\":\\\"t_rational_0_by_1\\\",\\\"typeString\\\":\\\"int_const 0\\\"}],\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"type(bytes32)\\\",\\\"value\\\":\\\"bytes32\\\"},\\\"id\\\":4,\\\"name\\\":\\\"ElementaryTypeNameExpression\\\",\\\"src\\\":\\\"86:7:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"hexvalue\\\":\\\"30\\\",\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"subdenomination\\\":null,\\\"token\\\":\\\"number\\\",\\\"type\\\":\\\"int_const 0\\\",\\\"value\\\":\\\"0\\\"},\\\"id\\\":5,\\\"name\\\":\\\"Literal\\\",\\\"src\\\":\\\"94:1:0\\\"}],\\\"id\\\":6,\\\"name\\\":\\\"FunctionCall\\\",\\\"src\\\":\\\"86:10:0\\\"}],\\\"id\\\":7,\\\"name\\\":\\\"TupleExpression\\\",\\\"src\\\":\\\"85:12:0\\\"}],\\\"id\\\":8,\\\"name\\\":\\\"VariableDeclaration\\\",\\\"src\\\":\\\"59:38:0\\\"}],\\\"id\\\":9,\\\"name\\\":\\\"ContractDefinition\\\",\\\"src\\\":\\\"25:75:0\\\"}],\\\"id\\\":10,\\\"name\\\":\\\"SourceUnit\\\",\\\"src\\\":\\\"0:102:0\\\"}}},\\\"version\\\":\\\"0.5.0+commit.1d4f565a.Linux.g++\\\"}"
                        }
                      }
                    }
                  }
                }
              },
              "schema": {
                "type": "object",
                "title": "Complete analysis",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "description": "Expand `data` to view full schema.",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "Compete Analysis",
                        "description": "Required. Expand `data` to view full schema.",
                        "required": [
                          "bytecode",
                          "mainSource",
                          "sources"
                        ],
                        "properties": {
                          "bytecode": {
                            "type": "string",
                            "description": "The bytecode and additional code to get the code placed on the blockchain; in other words, the code of the contract constructor.\nNote: in solc's JSON this is called `bin`. See also [solc bin vs. bin-runtime](https://ethereum.stackexchange.com/questions/13086/solc-bin-vs-bin-runtime).\n"
                          },
                          "mainSource": {
                            "type": "string",
                            "description": "MainSource is the path to the Solidity file that is provided to the compiler as input."
                          },
                          "sources": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Sources map containing objects that each map to *at least one of* `source` or `ast` field to the respective contents.\n"
                          },
                          "contractName": {
                            "type": "string",
                            "description": "The Smart Contract name. Note that in Solidity this is name is case sensitive."
                          },
                          "deployedBytecode": {
                            "type": "string",
                            "description": "The bytecode that is placed on the blockchain. Note: in solc's JSON this is called `bin-runtime`.\nThis is distinct from bytecode described above.\n"
                          },
                          "sourceMap": {
                            "type": "string",
                            "description": "Source map for the `bytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                          },
                          "deployedSourceMap": {
                            "type": "string",
                            "description": "Source map for the `deployedBytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                          },
                          "sourceList": {
                            "type": "array",
                            "minItems": 1,
                            "uniqueItems": true,
                            "description": "The list of files that are being mapped to in the `sources` field.\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "version": {
                            "type": "string",
                            "description": "Version information that may be produced by the compiler or system that\nproduced the Smart Contract code. For example, in a Smart Contract compiled\nvia `solc`, version 0.5.2, it might be `0.5.2+commit.1df8f40c.Linux.g++`.\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "analysisMode": {
                            "type": "string",
                            "enum": [
                              "full",
                              "quick"
                            ],
                            "description": "`quick` will perform quick time-limited analysis. `full` performs a much more complete and longer-running analysis.\n\n`full` mode requires `FULL_ANALYSIS` permission which is granted to\npaid users.\n"
                          }
                        }
                      },
                      {
                        "description": "Required. Expand `data` to view full schema.",
                        "title": "Bytecode Only",
                        "type": "object",
                        "required": [
                          "bytecode"
                        ],
                        "properties": {
                          "bytecode": {
                            "type": "string",
                            "description": "The bytecode and additional code to get the code placed on the blockchain; in other words, the code of the contract constructor.\nNote: in solc's JSON this is called `bin`. See also [solc bin vs. bin-runtime](https://ethereum.stackexchange.com/questions/13086/solc-bin-vs-bin-runtime).\n"
                          },
                          "contractName": {
                            "type": "string",
                            "description": "The Smart Contract name. Note that in Solidity this is name is case sensitive."
                          },
                          "deployedBytecode": {
                            "type": "string",
                            "description": "The bytecode that is placed on the blockchain. Note: in solc's JSON this is called `bin-runtime`.\nThis is distinct from bytecode described above.\n"
                          },
                          "sourceMap": {
                            "type": "string",
                            "description": "Source map for the `bytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                          },
                          "deployedSourceMap": {
                            "type": "string",
                            "description": "Source map for the `deployedBytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                          },
                          "sources": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Sources map containing objects that each map to *at least one of* `source` or `ast` field to the respective contents.\n"
                          },
                          "mainSource": {
                            "type": "string",
                            "description": "MainSource is the path to the Solidity file that is provided to the compiler as input."
                          },
                          "sourceList": {
                            "type": "array",
                            "minItems": 1,
                            "uniqueItems": true,
                            "description": "The list of files that are being mapped to in the `sources` field.\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "version": {
                            "type": "string",
                            "description": "Version information that may be produced by the compiler or system that\nproduced the Smart Contract code. For example, in a Smart Contract compiled\nvia `solc`, version 0.5.2, it might be `0.5.2+commit.1df8f40c.Linux.g++`.\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "analysisMode": {
                            "type": "string",
                            "enum": [
                              "full",
                              "quick"
                            ],
                            "description": "`quick` will perform quick time-limited analysis. `full` performs a much more complete and longer-running analysis.\n\n`full` mode requires `FULL_ANALYSIS` permission which is granted to\npaid users.\n"
                          }
                        }
                      },
                      {
                        "description": "Required. Expand `data` to view full schema.",
                        "type": "object",
                        "title": "Sourcecode Only",
                        "required": [
                          "mainSource",
                          "sources"
                        ],
                        "properties": {
                          "mainSource": {
                            "type": "string",
                            "description": "MainSource is the path to the Solidity file that is provided to the compiler as input."
                          },
                          "sources": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "description": "Sources map containing objects that each map to *at least one of* `source` or `ast` field to the respective contents.\n"
                          },
                          "contractName": {
                            "type": "string",
                            "description": "The Smart Contract name. Note that in Solidity this is name is case sensitive."
                          },
                          "bytecode": {
                            "type": "string",
                            "description": "The bytecode and additional code to get the code placed on the blockchain; in other words, the code of the contract constructor.\nNote: in solc's JSON this is called `bin`. See also [solc bin vs. bin-runtime](https://ethereum.stackexchange.com/questions/13086/solc-bin-vs-bin-runtime).\n"
                          },
                          "deployedBytecode": {
                            "type": "string",
                            "description": "The bytecode that is placed on the blockchain. Note: in solc's JSON this is called `bin-runtime`.\nThis is distinct from bytecode described above.\n"
                          },
                          "sourceMap": {
                            "type": "string",
                            "description": "Source map for the `bytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                          },
                          "deployedSourceMap": {
                            "type": "string",
                            "description": "Source map for the `deployedBytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                          },
                          "sourceList": {
                            "type": "array",
                            "minItems": 1,
                            "uniqueItems": true,
                            "description": "The list of files that are being mapped to in the `sources` field.\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "version": {
                            "type": "string",
                            "description": "Version information that may be produced by the compiler or system that\nproduced the Smart Contract code. For example, in a Smart Contract compiled\nvia `solc`, version 0.5.2, it might be `0.5.2+commit.1df8f40c.Linux.g++`.\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "analysisMode": {
                            "type": "string",
                            "enum": [
                              "full",
                              "quick"
                            ],
                            "description": "`quick` will perform quick time-limited analysis. `full` performs a much more complete and longer-running analysis.\n\n`full` mode requires `FULL_ANALYSIS` permission which is granted to\npaid users.\n"
                          }
                        }
                      }
                    ]
                  },
                  "clientToolName": {
                    "type": "string",
                    "description": "Optional. Name of the client tool sending the request."
                  },
                  "noCacheLookup": {
                    "type": "boolean",
                    "description": "Optional. When `true` API won't look into the cache of past analyses, and\nalways will run a new analysis for this request. The using of cache has no\nother side effects beside saving the runtime, thus this option is intended\nonly for benchmarking, API health control, and debuging purposes.\nItrequries `NO_CACHE_LOOKUP` permission to use, which is granted only to\nMythX team members.\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analysis request received. Check the `status` field for request status.\nIt can be one of:\n* `Queued`: The analysis request is in a backlog queue of analysis requests to be processed.\n* `Finished`: Analysis has finished. This can happen if the analysis is exactly the same as a prior\nrun, so results come the cached reports. Using the `uuid` field in the response, issue a request to the get the issue results using\n   another call to get [Analysis results](#operation/getAnalysis).\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "description": "MythX API version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "clientToolName": {
                      "type": "string",
                      "description": "The identifier of the mythx client the analyses was triggered with.\n"
                    },
                    "error": {
                      "type": "string",
                      "description": "Holds error message if analysis failed; absent otherwise.\n"
                    },
                    "harveyVersion": {
                      "type": "string",
                      "description": "Harvey core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "maruVersion": {
                      "type": "string",
                      "description": "Maru core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "mythrilVersion": {
                      "type": "string",
                      "description": "Mythril core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "queueTime": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The time [ms] from analysis submission to its execution start, or to\nthe present moment, if this analysis is still in the queue.\n"
                    },
                    "runTime": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The time [ms] from the start of analysis execution till its end.\nEquals zero, if this analysis is still in the queue.\n"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Queued",
                        "In progress",
                        "Finished",
                        "Error"
                      ],
                      "description": "Current status of the analysis."
                    },
                    "submittedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the analysis submission to the API."
                    },
                    "submittedBy": {
                      "type": "string",
                      "description": "ID of the submitter."
                    },
                    "uuid": {
                      "description": "Unique identifier of the analysis.",
                      "type": "string",
                      "format": "uuid"
                    },
                    "info": {
                      "type": "string",
                      "nullable": true,
                      "description": "An optional human-readable message from API."
                    }
                  }
                },
                "example": {
                  "apiVersion": "v1.3.0",
                  "harveyVersion": "v0.1.0",
                  "maruVersion": "v0.2.0",
                  "mythrilVersion": "0.19.11",
                  "queueTime": 0,
                  "status": "Queued",
                  "submittedAt": "2019-01-10T01:29:38.410Z",
                  "submittedBy": "000008544b0aa00010a91111",
                  "uuid": "0680a1e2-b908-4c9a-a15b-636ef9b61486"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "413": {
            "description": "JSON data sent too large &mdash; Your request's body was larger than the\nmaximum 15MB limit allowed by the server. Try to split your request into\nserveral ones.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 413,
                  "error": "Payload Too Large - Your request's body was larger than the maximum 15MB limit allowed by the server. Try to split your request into serveral ones."
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{uuid}": {
      "get": {
        "tags": [
          "Security Analysis"
        ],
        "operationId": "getAnalysis",
        "summary": "Analysis Status",
        "description": "Gets status and metadata of for a prior\n[submit Smart Contract analysis request](#operation/submitAnalysis).\nIn the submission, a _uuid_ was returned, which should be used in the url for\nthis request.\nWhen analysis **status** is `Finished`,\n[GET /analyses/{uuid}/issues](#operation/getAnalysisIssues) may be\nused to list detected vulnerabilities.\n",
        "security": [
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "description": "analysis id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis status request processed. Check the `status` field for request status.\nIt can be one of:\n* `Queued`: The analysis request is in a backlog queue of analysis requests to be processed.\n* `Running`: The analysis request is currently running MythX analysis.\n* `Error`: There was some error that terminated analysis processing. Check the `error` field for details about the problem.\n* `Finished`: Analysis has finished. Using the `uuid` field in the response issue a request to the get the issue results using\n   another call to get [Analysis results](#operation/getAnalysis).\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "description": "MythX API version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "clientToolName": {
                      "type": "string",
                      "description": "The identifier of the mythx client the analyses was triggered with.\n"
                    },
                    "error": {
                      "type": "string",
                      "description": "Holds error message if analysis failed; absent otherwise.\n"
                    },
                    "harveyVersion": {
                      "type": "string",
                      "description": "Harvey core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "maruVersion": {
                      "type": "string",
                      "description": "Maru core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "mythrilVersion": {
                      "type": "string",
                      "description": "Mythril core version at the moment of analysis execution;\nor at the moment of submission, if this analysis is still queued.\n"
                    },
                    "queueTime": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The time [ms] from analysis submission to its execution start, or to\nthe present moment, if this analysis is still in the queue.\n"
                    },
                    "runTime": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The time [ms] from the start of analysis execution till its end.\nEquals zero, if this analysis is still in the queue.\n"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Queued",
                        "In progress",
                        "Finished",
                        "Error"
                      ],
                      "description": "Current status of the analysis."
                    },
                    "submittedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of the analysis submission to the API."
                    },
                    "submittedBy": {
                      "type": "string",
                      "description": "ID of the submitter."
                    },
                    "uuid": {
                      "description": "Unique identifier of the analysis.",
                      "type": "string",
                      "format": "uuid"
                    },
                    "info": {
                      "type": "string",
                      "nullable": true,
                      "description": "An optional human-readable message from API."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 404,
                  "error": "Route Not Found"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{uuid}/input": {
      "get": {
        "tags": [
          "Security Analysis"
        ],
        "operationId": "getAnalysisInput",
        "summary": "Analysis Input",
        "description": "Returns the input of a past analysis.\n",
        "security": [
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "description": "analysis id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns requested input.",
            "content": {
              "application/json": {
                "examples": {
                  "complete": {
                    "summary": "Complete Analysis",
                    "value": {
                      "bytecode": "0x6080604052602060405190810160405280600060010260001916600019168152506000906001610030929190610043565b5034801561003d57600080fd5b506100bb565b828054828255906000526020600020908101928215610085579160200282015b82811115610084578251829060001916905591602001919060010190610063565b5b5090506100929190610096565b5090565b6100b891905b808211156100b457600081600090555060010161009c565b5090565b90565b60d8806100c96000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063017a9105146044575b600080fd5b348015604f57600080fd5b50606c60048036038101908080359060200190929190505050608a565b60405180826000191660001916815260200191505060405180910390f35b600081815481101515609857fe5b9060005260206000200160009150905054815600a165627a7a72305820d1c4ab8874b5f3cc139613c225a5908ed916e813f5ccdf9a9de97ce28420ca090029",
                      "mainSource": "PublicStorageArray.sol",
                      "sources": {
                        "PublicStorageArray.sol": {
                          "source": "pragma solidity ^0.5.0;\\n\\ncontract PublicStorageArray {\\n    bytes32[] public states = [bytes32(0)];\\n}",
                          "ast": "{\\\"contracts\\\":{\\\"/tmp/test.sol:PublicStorageArray\\\":{}},\\\"sourceList\\\":[\\\"/tmp/test.sol\\\"],\\\"sources\\\":{\\\"/tmp/test.sol\\\":{\\\"AST\\\":{\\\"attributes\\\":{\\\"absolutePath\\\":\\\"/tmp/test.sol\\\",\\\"exportedSymbols\\\":{\\\"PublicStorageArray\\\":[9]}},\\\"children\\\":[{\\\"attributes\\\":{\\\"literals\\\":[\\\"solidity\\\",\\\"^\\\",\\\"0.5\\\",\\\".0\\\"]},\\\"id\\\":1,\\\"name\\\":\\\"PragmaDirective\\\",\\\"src\\\":\\\"0:23:0\\\"},{\\\"attributes\\\":{\\\"baseContracts\\\":[null],\\\"contractDependencies\\\":[null],\\\"contractKind\\\":\\\"contract\\\",\\\"documentation\\\":null,\\\"fullyImplemented\\\":true,\\\"linearizedBaseContracts\\\":[9],\\\"name\\\":\\\"PublicStorageArray\\\",\\\"scope\\\":10},\\\"children\\\":[{\\\"attributes\\\":{\\\"constant\\\":false,\\\"name\\\":\\\"states\\\",\\\"scope\\\":9,\\\"stateVariable\\\":true,\\\"storageLocation\\\":\\\"default\\\",\\\"type\\\":\\\"bytes32[]\\\",\\\"visibility\\\":\\\"public\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"length\\\":null,\\\"type\\\":\\\"bytes32[]\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"name\\\":\\\"bytes32\\\",\\\"type\\\":\\\"bytes32\\\"},\\\"id\\\":2,\\\"name\\\":\\\"ElementaryTypeName\\\",\\\"src\\\":\\\"59:7:0\\\"}],\\\"id\\\":3,\\\"name\\\":\\\"ArrayTypeName\\\",\\\"src\\\":\\\"59:9:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isInlineArray\\\":true,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"bytes32[1] memory\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"isStructConstructorCall\\\":false,\\\"lValueRequested\\\":false,\\\"names\\\":[null],\\\"type\\\":\\\"bytes32\\\",\\\"type_conversion\\\":true},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":[{\\\"typeIdentifier\\\":\\\"t_rational_0_by_1\\\",\\\"typeString\\\":\\\"int_const 0\\\"}],\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"type(bytes32)\\\",\\\"value\\\":\\\"bytes32\\\"},\\\"id\\\":4,\\\"name\\\":\\\"ElementaryTypeNameExpression\\\",\\\"src\\\":\\\"86:7:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"hexvalue\\\":\\\"30\\\",\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"subdenomination\\\":null,\\\"token\\\":\\\"number\\\",\\\"type\\\":\\\"int_const 0\\\",\\\"value\\\":\\\"0\\\"},\\\"id\\\":5,\\\"name\\\":\\\"Literal\\\",\\\"src\\\":\\\"94:1:0\\\"}],\\\"id\\\":6,\\\"name\\\":\\\"FunctionCall\\\",\\\"src\\\":\\\"86:10:0\\\"}],\\\"id\\\":7,\\\"name\\\":\\\"TupleExpression\\\",\\\"src\\\":\\\"85:12:0\\\"}],\\\"id\\\":8,\\\"name\\\":\\\"VariableDeclaration\\\",\\\"src\\\":\\\"59:38:0\\\"}],\\\"id\\\":9,\\\"name\\\":\\\"ContractDefinition\\\",\\\"src\\\":\\\"25:75:0\\\"}],\\\"id\\\":10,\\\"name\\\":\\\"SourceUnit\\\",\\\"src\\\":\\\"0:102:0\\\"}}},\\\"version\\\":\\\"0.5.0+commit.1d4f565a.Linux.g++\\\"}"
                        }
                      }
                    }
                  },
                  "bytecode-only": {
                    "summary": "Bytecode Only",
                    "value": {
                      "bytecode": "0x6080604052602060405190810160405280600060010260001916600019168152506000906001610030929190610043565b5034801561003d57600080fd5b506100bb565b828054828255906000526020600020908101928215610085579160200282015b82811115610084578251829060001916905591602001919060010190610063565b5b5090506100929190610096565b5090565b6100b891905b808211156100b457600081600090555060010161009c565b5090565b90565b60d8806100c96000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063017a9105146044575b600080fd5b348015604f57600080fd5b50606c60048036038101908080359060200190929190505050608a565b60405180826000191660001916815260200191505060405180910390f35b600081815481101515609857fe5b9060005260206000200160009150905054815600a165627a7a72305820d1c4ab8874b5f3cc139613c225a5908ed916e813f5ccdf9a9de97ce28420ca090029"
                    }
                  },
                  "sources-only": {
                    "summary": "Sources Only",
                    "value": {
                      "mainSource": "PublicStorageArray.sol",
                      "sources": {
                        "PublicStorageArray.sol": {
                          "source": "pragma solidity ^0.5.0;\\n\\ncontract PublicStorageArray {\\n    bytes32[] public states = [bytes32(0)];\\n}",
                          "ast": "{\\\"contracts\\\":{\\\"/tmp/test.sol:PublicStorageArray\\\":{}},\\\"sourceList\\\":[\\\"/tmp/test.sol\\\"],\\\"sources\\\":{\\\"/tmp/test.sol\\\":{\\\"AST\\\":{\\\"attributes\\\":{\\\"absolutePath\\\":\\\"/tmp/test.sol\\\",\\\"exportedSymbols\\\":{\\\"PublicStorageArray\\\":[9]}},\\\"children\\\":[{\\\"attributes\\\":{\\\"literals\\\":[\\\"solidity\\\",\\\"^\\\",\\\"0.5\\\",\\\".0\\\"]},\\\"id\\\":1,\\\"name\\\":\\\"PragmaDirective\\\",\\\"src\\\":\\\"0:23:0\\\"},{\\\"attributes\\\":{\\\"baseContracts\\\":[null],\\\"contractDependencies\\\":[null],\\\"contractKind\\\":\\\"contract\\\",\\\"documentation\\\":null,\\\"fullyImplemented\\\":true,\\\"linearizedBaseContracts\\\":[9],\\\"name\\\":\\\"PublicStorageArray\\\",\\\"scope\\\":10},\\\"children\\\":[{\\\"attributes\\\":{\\\"constant\\\":false,\\\"name\\\":\\\"states\\\",\\\"scope\\\":9,\\\"stateVariable\\\":true,\\\"storageLocation\\\":\\\"default\\\",\\\"type\\\":\\\"bytes32[]\\\",\\\"visibility\\\":\\\"public\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"length\\\":null,\\\"type\\\":\\\"bytes32[]\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"name\\\":\\\"bytes32\\\",\\\"type\\\":\\\"bytes32\\\"},\\\"id\\\":2,\\\"name\\\":\\\"ElementaryTypeName\\\",\\\"src\\\":\\\"59:7:0\\\"}],\\\"id\\\":3,\\\"name\\\":\\\"ArrayTypeName\\\",\\\"src\\\":\\\"59:9:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isInlineArray\\\":true,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"bytes32[1] memory\\\"},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"isStructConstructorCall\\\":false,\\\"lValueRequested\\\":false,\\\"names\\\":[null],\\\"type\\\":\\\"bytes32\\\",\\\"type_conversion\\\":true},\\\"children\\\":[{\\\"attributes\\\":{\\\"argumentTypes\\\":[{\\\"typeIdentifier\\\":\\\"t_rational_0_by_1\\\",\\\"typeString\\\":\\\"int_const 0\\\"}],\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"type\\\":\\\"type(bytes32)\\\",\\\"value\\\":\\\"bytes32\\\"},\\\"id\\\":4,\\\"name\\\":\\\"ElementaryTypeNameExpression\\\",\\\"src\\\":\\\"86:7:0\\\"},{\\\"attributes\\\":{\\\"argumentTypes\\\":null,\\\"hexvalue\\\":\\\"30\\\",\\\"isConstant\\\":false,\\\"isLValue\\\":false,\\\"isPure\\\":true,\\\"lValueRequested\\\":false,\\\"subdenomination\\\":null,\\\"token\\\":\\\"number\\\",\\\"type\\\":\\\"int_const 0\\\",\\\"value\\\":\\\"0\\\"},\\\"id\\\":5,\\\"name\\\":\\\"Literal\\\",\\\"src\\\":\\\"94:1:0\\\"}],\\\"id\\\":6,\\\"name\\\":\\\"FunctionCall\\\",\\\"src\\\":\\\"86:10:0\\\"}],\\\"id\\\":7,\\\"name\\\":\\\"TupleExpression\\\",\\\"src\\\":\\\"85:12:0\\\"}],\\\"id\\\":8,\\\"name\\\":\\\"VariableDeclaration\\\",\\\"src\\\":\\\"59:38:0\\\"}],\\\"id\\\":9,\\\"name\\\":\\\"ContractDefinition\\\",\\\"src\\\":\\\"25:75:0\\\"}],\\\"id\\\":10,\\\"name\\\":\\\"SourceUnit\\\",\\\"src\\\":\\\"0:102:0\\\"}}},\\\"version\\\":\\\"0.5.0+commit.1d4f565a.Linux.g++\\\"}"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "title": "Compete Analysis",
                      "description": "Required. Expand `data` to view full schema.",
                      "required": [
                        "bytecode",
                        "mainSource",
                        "sources"
                      ],
                      "properties": {
                        "bytecode": {
                          "type": "string",
                          "description": "The bytecode and additional code to get the code placed on the blockchain; in other words, the code of the contract constructor.\nNote: in solc's JSON this is called `bin`. See also [solc bin vs. bin-runtime](https://ethereum.stackexchange.com/questions/13086/solc-bin-vs-bin-runtime).\n"
                        },
                        "mainSource": {
                          "type": "string",
                          "description": "MainSource is the path to the Solidity file that is provided to the compiler as input."
                        },
                        "sources": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Sources map containing objects that each map to *at least one of* `source` or `ast` field to the respective contents.\n"
                        },
                        "contractName": {
                          "type": "string",
                          "description": "The Smart Contract name. Note that in Solidity this is name is case sensitive."
                        },
                        "deployedBytecode": {
                          "type": "string",
                          "description": "The bytecode that is placed on the blockchain. Note: in solc's JSON this is called `bin-runtime`.\nThis is distinct from bytecode described above.\n"
                        },
                        "sourceMap": {
                          "type": "string",
                          "description": "Source map for the `bytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                        },
                        "deployedSourceMap": {
                          "type": "string",
                          "description": "Source map for the `deployedBytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                        },
                        "sourceList": {
                          "type": "array",
                          "minItems": 1,
                          "uniqueItems": true,
                          "description": "The list of files that are being mapped to in the `sources` field.\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "version": {
                          "type": "string",
                          "description": "Version information that may be produced by the compiler or system that\nproduced the Smart Contract code. For example, in a Smart Contract compiled\nvia `solc`, version 0.5.2, it might be `0.5.2+commit.1df8f40c.Linux.g++`.\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "analysisMode": {
                          "type": "string",
                          "enum": [
                            "full",
                            "quick"
                          ],
                          "description": "`quick` will perform quick time-limited analysis. `full` performs a much more complete and longer-running analysis.\n\n`full` mode requires `FULL_ANALYSIS` permission which is granted to\npaid users.\n"
                        }
                      }
                    },
                    {
                      "description": "Required. Expand `data` to view full schema.",
                      "title": "Bytecode Only",
                      "type": "object",
                      "required": [
                        "bytecode"
                      ],
                      "properties": {
                        "bytecode": {
                          "type": "string",
                          "description": "The bytecode and additional code to get the code placed on the blockchain; in other words, the code of the contract constructor.\nNote: in solc's JSON this is called `bin`. See also [solc bin vs. bin-runtime](https://ethereum.stackexchange.com/questions/13086/solc-bin-vs-bin-runtime).\n"
                        },
                        "contractName": {
                          "type": "string",
                          "description": "The Smart Contract name. Note that in Solidity this is name is case sensitive."
                        },
                        "deployedBytecode": {
                          "type": "string",
                          "description": "The bytecode that is placed on the blockchain. Note: in solc's JSON this is called `bin-runtime`.\nThis is distinct from bytecode described above.\n"
                        },
                        "sourceMap": {
                          "type": "string",
                          "description": "Source map for the `bytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                        },
                        "deployedSourceMap": {
                          "type": "string",
                          "description": "Source map for the `deployedBytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                        },
                        "sources": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Sources map containing objects that each map to *at least one of* `source` or `ast` field to the respective contents.\n"
                        },
                        "mainSource": {
                          "type": "string",
                          "description": "MainSource is the path to the Solidity file that is provided to the compiler as input."
                        },
                        "sourceList": {
                          "type": "array",
                          "minItems": 1,
                          "uniqueItems": true,
                          "description": "The list of files that are being mapped to in the `sources` field.\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "version": {
                          "type": "string",
                          "description": "Version information that may be produced by the compiler or system that\nproduced the Smart Contract code. For example, in a Smart Contract compiled\nvia `solc`, version 0.5.2, it might be `0.5.2+commit.1df8f40c.Linux.g++`.\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "analysisMode": {
                          "type": "string",
                          "enum": [
                            "full",
                            "quick"
                          ],
                          "description": "`quick` will perform quick time-limited analysis. `full` performs a much more complete and longer-running analysis.\n\n`full` mode requires `FULL_ANALYSIS` permission which is granted to\npaid users.\n"
                        }
                      }
                    },
                    {
                      "description": "Required. Expand `data` to view full schema.",
                      "type": "object",
                      "title": "Sourcecode Only",
                      "required": [
                        "mainSource",
                        "sources"
                      ],
                      "properties": {
                        "mainSource": {
                          "type": "string",
                          "description": "MainSource is the path to the Solidity file that is provided to the compiler as input."
                        },
                        "sources": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Sources map containing objects that each map to *at least one of* `source` or `ast` field to the respective contents.\n"
                        },
                        "contractName": {
                          "type": "string",
                          "description": "The Smart Contract name. Note that in Solidity this is name is case sensitive."
                        },
                        "bytecode": {
                          "type": "string",
                          "description": "The bytecode and additional code to get the code placed on the blockchain; in other words, the code of the contract constructor.\nNote: in solc's JSON this is called `bin`. See also [solc bin vs. bin-runtime](https://ethereum.stackexchange.com/questions/13086/solc-bin-vs-bin-runtime).\n"
                        },
                        "deployedBytecode": {
                          "type": "string",
                          "description": "The bytecode that is placed on the blockchain. Note: in solc's JSON this is called `bin-runtime`.\nThis is distinct from bytecode described above.\n"
                        },
                        "sourceMap": {
                          "type": "string",
                          "description": "Source map for the `bytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                        },
                        "deployedSourceMap": {
                          "type": "string",
                          "description": "Source map for the `deployedBytecode` field. See Solidity's [Source\nMappings](https://solidity.readthedocs.io/en/v0.5.2/miscellaneous.html#source-mappings)\nfor how the Solidity compiler, `solc` defines this.\n"
                        },
                        "sourceList": {
                          "type": "array",
                          "minItems": 1,
                          "uniqueItems": true,
                          "description": "The list of files that are being mapped to in the `sources` field.\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "version": {
                          "type": "string",
                          "description": "Version information that may be produced by the compiler or system that\nproduced the Smart Contract code. For example, in a Smart Contract compiled\nvia `solc`, version 0.5.2, it might be `0.5.2+commit.1df8f40c.Linux.g++`.\n",
                          "items": {
                            "type": "string"
                          }
                        },
                        "analysisMode": {
                          "type": "string",
                          "enum": [
                            "full",
                            "quick"
                          ],
                          "description": "`quick` will perform quick time-limited analysis. `full` performs a much more complete and longer-running analysis.\n\n`full` mode requires `FULL_ANALYSIS` permission which is granted to\npaid users.\n"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden &mdash; Request is not allowed to the authenticated user due to\na lack of permissions.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 403,
                  "error": "Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 404,
                  "error": "Route Not Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/analyses/{uuid}/issues": {
      "get": {
        "operationId": "getAnalysisIssues",
        "tags": [
          "Security Analysis"
        ],
        "summary": "Detected issues",
        "description": "Lists issues detected during the analysis specified by UUID. Request\nwill fail for unfinished analyses, use\n[GET /analyses/{uuid}](#operation/getAnalysis) to verify the current\nanalysis status.\n\n**IMPORTANT NOTE:** Due to technical constraints, for some results the creation\nbytecode hash is returned inside the source list - instead of the original\nfilename. Results concerning this hash can safely be excluded if they do not\nprovide any additional value. This case usually happens when code is dynamically\ngenerated, e.g. inside the given contract's constructor.\n",
        "security": [
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "description": "analysis id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "minItems": 0,
                  "uniqueItems": true,
                  "items": {
                    "type": "object",
                    "required": [
                      "issues",
                      "sourceType",
                      "sourceFormat",
                      "sourceList"
                    ],
                    "properties": {
                      "issues": {
                        "type": "array",
                        "minItems": 0,
                        "uniqueItems": true,
                        "items": {
                          "type": "object",
                          "required": [
                            "swcID",
                            "swcTitle",
                            "description",
                            "severity",
                            "locations"
                          ],
                          "properties": {
                            "swcID": {
                              "type": "string",
                              "example": "SWC-103"
                            },
                            "swcTitle": {
                              "type": "string",
                              "example": "Floating Pragma"
                            },
                            "description": {
                              "type": "object",
                              "properties": {
                                "head": {
                                  "type": "string",
                                  "example": "A floating pragma is set."
                                },
                                "tail": {
                                  "type": "string",
                                  "example": "It is recommended to make a conscious choice on what version of Solidity is used for compilation. Currently any version equal or greater than \\\"0.4.24\\\" is allowed."
                                }
                              }
                            },
                            "severity": {
                              "type": "string",
                              "enum": [
                                "None",
                                "Low",
                                "Medium",
                                "High"
                              ],
                              "example": "Low"
                            },
                            "locations": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "sourceMap"
                                ],
                                "properties": {
                                  "sourceMap": {
                                    "type": "string",
                                    "example": "48:1:0"
                                  },
                                  "sourceType": {
                                    "type": "string",
                                    "enum": [
                                      "soldity-file",
                                      "vyper-file",
                                      "soldity-contract",
                                      "ethereum-address",
                                      "raw-bytecode"
                                    ],
                                    "example": "raw-bytecode"
                                  },
                                  "sourceFormat": {
                                    "type": "string",
                                    "enum": [
                                      "text",
                                      "solc-ast-legacy-json",
                                      "solc-ast-compact-json",
                                      "evm-byzantium-bytecode",
                                      "ewasm-raw"
                                    ],
                                    "example": "evm-byzantium-bytecode"
                                  },
                                  "sourceList": {
                                    "type": "array",
                                    "minItems": 1,
                                    "uniqueItems": true,
                                    "items": {
                                      "type": "string",
                                      "example": "/test/my-super-safe-contract.sol"
                                    }
                                  }
                                }
                              }
                            },
                            "extra": {
                              "type": "object"
                            }
                          }
                        }
                      },
                      "sourceType": {
                        "type": "string",
                        "enum": [
                          "soldity-file",
                          "vyper-file",
                          "soldity-contract",
                          "ethereum-address",
                          "raw-bytecode"
                        ],
                        "example": "solidity-file"
                      },
                      "sourceFormat": {
                        "type": "string",
                        "enum": [
                          "text",
                          "solc-ast-legacy-json",
                          "solc-ast-compact-json",
                          "evm-byzantium-bytecode",
                          "ewasm-raw"
                        ],
                        "example": "text"
                      },
                      "sourceList": {
                        "type": "array",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                          "type": "string",
                          "example": "/test/my-super-safe-contract.sol"
                        }
                      },
                      "meta": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 404,
                  "error": "Route Not Found"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "listUsers",
        "summary": "List of users",
        "tags": [
          "User Accounts"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "description": "Lists registered API users. Allows to lookup users by email and\nEthereum addresses.\n\nFor users with no `USER_LOOKUP` permission this endpoint only finds their\nown user objects.\n\nReturns at most 20 users in a single response. Use the `offset` query\nparameter for pagination.\n",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset. The number of records to skip.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "User ordering.",
            "schema": {
              "default": "email",
              "type": "string",
              "enum": [
                "email"
              ]
            }
          },
          {
            "in": "query",
            "name": "email",
            "description": "Filter user by email fragment.",
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "in": "query",
            "name": "ethAddress",
            "description": "Filter users by Ethereum address fragments.",
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of matching users."
                    },
                    "users": {
                      "type": "array",
                      "description": "Up to 20 matching user object after the **offset**",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "MongoDB ObjectID",
                            "description": "User ID."
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date",
                            "description": "User registration timestamp."
                          },
                          "createdBy": {
                            "type": "string",
                            "format": "MongoDB ObjectID",
                            "description": "If this user has been created by another user, this field holds creator's user ID. Otherwise it is `null`."
                          },
                          "createdByPartner": {
                            "type": "boolean",
                            "description": "`true` if this user has been created by a partner, `false` otherwise.\n"
                          },
                          "creatorLabel": {
                            "type": "string",
                            "maxLength": 256,
                            "default": "",
                            "description": "If this user has been created by another user, this field will contain the value of creator's `label` field."
                          },
                          "email": {
                            "type": "object",
                            "description": "User email and related information.",
                            "properties": {
                              "address": {
                                "type": "string",
                                "format": "email",
                                "description": "Email address."
                              },
                              "verified": {
                                "type": "boolean",
                                "description": "A flag specifying whether the currently set email address has been verified."
                              }
                            }
                          },
                          "ethAddress": {
                            "type": "string",
                            "format": "Ethereum address",
                            "description": "Ethereum address."
                          },
                          "label": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Optional label, visible to the user, and editable by the user. It is also exposed to the users created by this user as `creatorLabel` field in their user objects."
                          },
                          "mustChangePassword": {
                            "type": "boolean",
                            "description": "Indicates that user must change password before he will be allowed to use\nmost of API functionality.\n"
                          },
                          "ownerPartnerId": {
                            "type": "string",
                            "format": "MongoDB ObjectID",
                            "description": "User ID of the partner responsible over this account, if any. The value\nof this field is used to aggregate usage stats of end-user accounts\nrelated to each partner, for partner billing, and book-keeping purposes.\n- For user accounts created by partners themselves, this value is force\n  set equal to the partner ID, thus it is equal to `createdBy` value;\n- When a MythX admin creates an account to pass it to a partner,\n  the admin is responsible to set the correct partner ID here.\n"
                          },
                          "ownerPartnerLabel": {
                            "type": "string",
                            "maxLength": 256,
                            "default": "",
                            "description": "If this user account is owned by a partner, this field will contain the value of partner's `label` field."
                          },
                          "privateLabel": {
                            "type": "string",
                            "maxLength": 256,
                            "description": "Optional label, invisible to the user. This label is only visible to, and editable by MythX admins, and also to users up in the user tree (i.e. those who created this user, those who created them, etc.)"
                          },
                          "preferences": {
                            "type": "object",
                            "title": "User Preferences",
                            "description": "Generic user preferences.",
                            "properties": {
                              "newsletter": {
                                "type": "boolean",
                                "default": false,
                                "description": "`true` if user wants to receive newsletters, `false` otherwise.\n"
                              }
                            }
                          },
                          "roles": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "The following user roles exist in MythX plaform as of now:\n\n- `admin` - Gives all possible permissions. It is only intended for core\n  members of MythX team.\n\n- `Free` - Gives permission for regular API usage. Currently it\n  means the allowance to send up to 1k analyses in any 24h period.\n\n- `partner` - Gives permission to create new privileged and regular users.\n\n- `Professional` - Currently not in use. Will take the current `Free` role's\n  permissions after the launch, and decrease of `Free` role allowances.\n\n- `Premium` - Gives permission for premium API usage. Currently it\n  means the allowance to send up to 10k analyses in any 24h period. Mind that\n  currently there is an additional limit for everybody: at most 100\n  non-finished analyses per user at any time.\n\n- `shared_user` - Gives permission to expirience all usage limits on per-IP\n  basis. This is intended for trial users only.\n\n- `trusted_user` - Gives permission to fetch internal platform usage \n  statistics.\n"
                          },
                          "subscriptionId": {
                            "type": "string",
                            "description": "ID of Daisy subscription ID, if any."
                          },
                          "termsId": {
                            "type": "string",
                            "description": "ID of terms the user has agreed to.",
                            "default": "no_terms",
                            "enum": [
                              "no_terms",
                              "standard_terms_v1.0.0"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "registerUser",
        "summary": "Create a new user",
        "tags": [
          "User Accounts"
        ],
        "security": [
          {
            "MetaMask": []
          }
        ],
        "description": "Creates a new user.\n\n- **Creation of a new user by a parent user**.\n\n  The parent user must have necessary permissions\n  ([GET /v1/users/{id}/permissions](#operation/getUserPermissions)).\n  Currently, `CREATE_USERS_ADMIN`, `CREATE_USERS_FREE`,\n  `CREATE_USERS_PROFESSIONAL`, `CREATE_USER_PREMIUM`,\n  `CREATE_USERS_TRUSTED`, and\n  `CREATE_USERS_WITHOUT_ROLES` permissions allow to create users with\n  corresponding roles, as well as further give and take corresponding\n  roles of created users.\n\n  The only obligatory request field is the `password` to set on the created\n  user account.\n\n- **Self-registration**\n\n  - **With [MetaMask](https://metamask.io/)**\n\n    This endpoint allows users to self-register at\n    [MythX Website](https://mythx.io). In this case it is obligatory to use\n    the [MetaMask authentication scheme](#section/API-Authentication-Methods/MetaMask),\n    and provide at least the following required parameters:\n    `password` (to set on the created user account), `termsId`,\n    and `gReCaptcha`.\n\n    `email`, if provided, must be unique among registered users.\n    It won't be used by API until verification\n    (*the exact details to be added*).\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Create User",
                    "required": [
                      "password"
                    ],
                    "properties": {
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "User password.\n\nA valid password is:\n- Between 8 and 64 symbols long (both inclusive);\n- Contains at least one lowercase (a-z) and uppercase (A-Z) letter;\n- Contains at least one digit (0-9);\n- Contains at least one of these symbols:\n  ```\n  `~!@#$%^&*()-_=+[{}]\\|;:'\",<.>/?€£¥₹\n  ```\n- Does not contain whitespaces.\n\nThese rules are validated by\n[password-validator](https://www.npmjs.com/package/password-validator)\nusing the following schema:\n```js\nconst MIN_PASSWORD_LENGTH = 8;\nconst MAX_PASSWORD_LENGTH = 64;\nconst passwordSchema = new PasswordValidator();\n  passwordSchema\n    .is().min(MIN_PASSWORD_LENGTH)\n    .is().max(MAX_PASSWORD_LENGTH)\n    .has().uppercase()\n    .has().lowercase()\n    .has().digits()\n    .has().symbols()\n    .has().not().spaces();\n```\n"
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email. Must be unique among already registered users."
                      },
                      "ethAddress": {
                        "type": "string",
                        "format": "Ethereum Address",
                        "description": "User's ethereum address."
                      },
                      "label": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Optional label, visible to the user, and editable by the user. It is also exposed to the users created by this user as `creatorLabel` field in their user objects."
                      },
                      "ownerPartnerId": {
                        "type": "string",
                        "format": "MongoDB ObjectID",
                        "description": "ID of the partner account associated with this user. Analyses executed by\nthe newly created user will be counted for that parnter for billing and\nbook-keeping purposes.\n\nRequires `SET_USER_OWNER_PARNTER_ID` permission to set.\n"
                      },
                      "privateLabel": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Optional label, invisible to the user. This label is only visible to, and editable by MythX admins, and also to users up in the user tree (i.e. those who created this user, those who created them, etc.)"
                      },
                      "preferences": {
                        "type": "object",
                        "title": "User Preferences",
                        "description": "Generic user preferences.",
                        "properties": {
                          "newsletter": {
                            "type": "boolean",
                            "default": false,
                            "description": "`true` if user wants to receive newsletters, `false` otherwise.\n"
                          }
                        }
                      },
                      "roles": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The following user roles exist in MythX plaform as of now:\n\n- `admin` - Gives all possible permissions. It is only intended for core\n  members of MythX team.\n\n- `Free` - Gives permission for regular API usage. Currently it\n  means the allowance to send up to 1k analyses in any 24h period.\n\n- `partner` - Gives permission to create new privileged and regular users.\n\n- `Professional` - Currently not in use. Will take the current `Free` role's\n  permissions after the launch, and decrease of `Free` role allowances.\n\n- `Premium` - Gives permission for premium API usage. Currently it\n  means the allowance to send up to 10k analyses in any 24h period. Mind that\n  currently there is an additional limit for everybody: at most 100\n  non-finished analyses per user at any time.\n\n- `shared_user` - Gives permission to expirience all usage limits on per-IP\n  basis. This is intended for trial users only.\n\n- `trusted_user` - Gives permission to fetch internal platform usage \n  statistics.\n"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Self-Registration With MetaMask",
                    "required": [
                      "password",
                      "gReCaptcha"
                    ],
                    "properties": {
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "User password.\n\nA valid password is:\n- Between 8 and 64 symbols long (both inclusive);\n- Contains at least one lowercase (a-z) and uppercase (A-Z) letter;\n- Contains at least one digit (0-9);\n- Contains at least one of these symbols:\n  ```\n  `~!@#$%^&*()-_=+[{}]\\|;:'\",<.>/?€£¥₹\n  ```\n- Does not contain whitespaces.\n\nThese rules are validated by\n[password-validator](https://www.npmjs.com/package/password-validator)\nusing the following schema:\n```js\nconst MIN_PASSWORD_LENGTH = 8;\nconst MAX_PASSWORD_LENGTH = 64;\nconst passwordSchema = new PasswordValidator();\n  passwordSchema\n    .is().min(MIN_PASSWORD_LENGTH)\n    .is().max(MAX_PASSWORD_LENGTH)\n    .has().uppercase()\n    .has().lowercase()\n    .has().digits()\n    .has().symbols()\n    .has().not().spaces();\n```\n"
                      },
                      "gReCaptcha": {
                        "type": "string",
                        "description": "Google ReCaptcha code."
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Email. Must be unique among already registered users."
                      },
                      "preferences": {
                        "type": "object",
                        "title": "User Preferences",
                        "description": "Generic user preferences.",
                        "properties": {
                          "newsletter": {
                            "type": "boolean",
                            "default": false,
                            "description": "`true` if user wants to receive newsletters, `false` otherwise.\n"
                          }
                        }
                      },
                      "subscriptionId": {
                        "type": "string",
                        "description": "ID of Daisy subscription ID, if any."
                      },
                      "termsId": {
                        "type": "string",
                        "description": "ID of terms the user has agreed to.",
                        "default": "no_terms",
                        "enum": [
                          "no_terms",
                          "standard_terms_v1.0.0"
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns created user object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "User ID."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date",
                      "description": "User registration timestamp."
                    },
                    "createdBy": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "If this user has been created by another user, this field holds creator's user ID. Otherwise it is `null`."
                    },
                    "createdByPartner": {
                      "type": "boolean",
                      "description": "`true` if this user has been created by a partner, `false` otherwise.\n"
                    },
                    "creatorLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "default": "",
                      "description": "If this user has been created by another user, this field will contain the value of creator's `label` field."
                    },
                    "email": {
                      "type": "object",
                      "description": "User email and related information.",
                      "properties": {
                        "address": {
                          "type": "string",
                          "format": "email",
                          "description": "Email address."
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "A flag specifying whether the currently set email address has been verified."
                        }
                      }
                    },
                    "ethAddress": {
                      "type": "string",
                      "format": "Ethereum address",
                      "description": "Ethereum address."
                    },
                    "label": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Optional label, visible to the user, and editable by the user. It is also exposed to the users created by this user as `creatorLabel` field in their user objects."
                    },
                    "mustChangePassword": {
                      "type": "boolean",
                      "description": "Indicates that user must change password before he will be allowed to use\nmost of API functionality.\n"
                    },
                    "ownerPartnerId": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "User ID of the partner responsible over this account, if any. The value\nof this field is used to aggregate usage stats of end-user accounts\nrelated to each partner, for partner billing, and book-keeping purposes.\n- For user accounts created by partners themselves, this value is force\n  set equal to the partner ID, thus it is equal to `createdBy` value;\n- When a MythX admin creates an account to pass it to a partner,\n  the admin is responsible to set the correct partner ID here.\n"
                    },
                    "ownerPartnerLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "default": "",
                      "description": "If this user account is owned by a partner, this field will contain the value of partner's `label` field."
                    },
                    "privateLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Optional label, invisible to the user. This label is only visible to, and editable by MythX admins, and also to users up in the user tree (i.e. those who created this user, those who created them, etc.)"
                    },
                    "preferences": {
                      "type": "object",
                      "title": "User Preferences",
                      "description": "Generic user preferences.",
                      "properties": {
                        "newsletter": {
                          "type": "boolean",
                          "default": false,
                          "description": "`true` if user wants to receive newsletters, `false` otherwise.\n"
                        }
                      }
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The following user roles exist in MythX plaform as of now:\n\n- `admin` - Gives all possible permissions. It is only intended for core\n  members of MythX team.\n\n- `Free` - Gives permission for regular API usage. Currently it\n  means the allowance to send up to 1k analyses in any 24h period.\n\n- `partner` - Gives permission to create new privileged and regular users.\n\n- `Professional` - Currently not in use. Will take the current `Free` role's\n  permissions after the launch, and decrease of `Free` role allowances.\n\n- `Premium` - Gives permission for premium API usage. Currently it\n  means the allowance to send up to 10k analyses in any 24h period. Mind that\n  currently there is an additional limit for everybody: at most 100\n  non-finished analyses per user at any time.\n\n- `shared_user` - Gives permission to expirience all usage limits on per-IP\n  basis. This is intended for trial users only.\n\n- `trusted_user` - Gives permission to fetch internal platform usage \n  statistics.\n"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "description": "ID of Daisy subscription ID, if any."
                    },
                    "termsId": {
                      "type": "string",
                      "description": "ID of terms the user has agreed to.",
                      "default": "no_terms",
                      "enum": [
                        "no_terms",
                        "standard_terms_v1.0.0"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/users/password-recovery": {
      "post": {
        "operationId": "passwordRecovery",
        "summary": "Password Recovery",
        "tags": [
          "User Accounts"
        ],
        "security": [
          {
            "none": []
          }
        ],
        "description": "Initializes password recovery via email. Requires user email set and verified.\nIf so, it sends an email with recovery link to that address.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "gReCaptcha"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email address.\n\nNote that operation will be success even when a non-existing\nemail is provided, and no recovery email have been sent. This\nis to prevent using this endpoint for scanning registered emails.\n"
                  },
                  "gReCaptcha": {
                    "type": "string",
                    "description": "Google ReCaptcha code."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "getUserById",
        "summary": "User Object By ID",
        "tags": [
          "User Accounts"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "description": "Gets user object by user ID.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "MongoDB Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns requested user object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "User ID."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date",
                      "description": "User registration timestamp."
                    },
                    "createdBy": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "If this user has been created by another user, this field holds creator's user ID. Otherwise it is `null`."
                    },
                    "createdByPartner": {
                      "type": "boolean",
                      "description": "`true` if this user has been created by a partner, `false` otherwise.\n"
                    },
                    "creatorLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "default": "",
                      "description": "If this user has been created by another user, this field will contain the value of creator's `label` field."
                    },
                    "email": {
                      "type": "object",
                      "description": "User email and related information.",
                      "properties": {
                        "address": {
                          "type": "string",
                          "format": "email",
                          "description": "Email address."
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "A flag specifying whether the currently set email address has been verified."
                        }
                      }
                    },
                    "ethAddress": {
                      "type": "string",
                      "format": "Ethereum address",
                      "description": "Ethereum address."
                    },
                    "label": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Optional label, visible to the user, and editable by the user. It is also exposed to the users created by this user as `creatorLabel` field in their user objects."
                    },
                    "mustChangePassword": {
                      "type": "boolean",
                      "description": "Indicates that user must change password before he will be allowed to use\nmost of API functionality.\n"
                    },
                    "ownerPartnerId": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "User ID of the partner responsible over this account, if any. The value\nof this field is used to aggregate usage stats of end-user accounts\nrelated to each partner, for partner billing, and book-keeping purposes.\n- For user accounts created by partners themselves, this value is force\n  set equal to the partner ID, thus it is equal to `createdBy` value;\n- When a MythX admin creates an account to pass it to a partner,\n  the admin is responsible to set the correct partner ID here.\n"
                    },
                    "ownerPartnerLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "default": "",
                      "description": "If this user account is owned by a partner, this field will contain the value of partner's `label` field."
                    },
                    "privateLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Optional label, invisible to the user. This label is only visible to, and editable by MythX admins, and also to users up in the user tree (i.e. those who created this user, those who created them, etc.)"
                    },
                    "preferences": {
                      "type": "object",
                      "title": "User Preferences",
                      "description": "Generic user preferences.",
                      "properties": {
                        "newsletter": {
                          "type": "boolean",
                          "default": false,
                          "description": "`true` if user wants to receive newsletters, `false` otherwise.\n"
                        }
                      }
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The following user roles exist in MythX plaform as of now:\n\n- `admin` - Gives all possible permissions. It is only intended for core\n  members of MythX team.\n\n- `Free` - Gives permission for regular API usage. Currently it\n  means the allowance to send up to 1k analyses in any 24h period.\n\n- `partner` - Gives permission to create new privileged and regular users.\n\n- `Professional` - Currently not in use. Will take the current `Free` role's\n  permissions after the launch, and decrease of `Free` role allowances.\n\n- `Premium` - Gives permission for premium API usage. Currently it\n  means the allowance to send up to 10k analyses in any 24h period. Mind that\n  currently there is an additional limit for everybody: at most 100\n  non-finished analyses per user at any time.\n\n- `shared_user` - Gives permission to expirience all usage limits on per-IP\n  basis. This is intended for trial users only.\n\n- `trusted_user` - Gives permission to fetch internal platform usage \n  statistics.\n"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "description": "ID of Daisy subscription ID, if any."
                    },
                    "termsId": {
                      "type": "string",
                      "description": "ID of terms the user has agreed to.",
                      "default": "no_terms",
                      "enum": [
                        "no_terms",
                        "standard_terms_v1.0.0"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden &mdash; Request is not allowed to the authenticated user due to\na lack of permissions.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 403,
                  "error": "Forbidden"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "userAction",
        "summary": "User account action",
        "tags": [
          "User Accounts"
        ],
        "security": [
          {
            "none": []
          },
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "description": "Executes one of generic operations on the specified user account:\n\n- **Change Password** allows to change user password.\n  Password must be different from previously used passwords.\n\n  This function supports a direct login with user credentials, hence\n  the optional `password` and `username` fields in the request. They\n  work the same as they would in\n  [POST /auth/login](#operation/login).\n\n  This function has two operation modes:\n  - Authenticated call to change user password;\n  - A call without authentication, which provides a reset code issued\n    previously by\n    [POST /users/password-recovery](#operation/passwordRecovery)\n    call.\n\n- **Initialization of Email Verification**: (re-)starts email verification\n  flow. API will check that user email is set, reset its status to\n  to unverified, and send an email with the verification link to\n  the user's email.\n\n- **Update User Details** allows to update:\n  - User first name;\n  - User last name;\n\n  Requires JWT or MetaMask authentication. Currently, it only allows\n  to change your own details only.\n\n- **Update User Preferences** allows to update:\n  - **Newsletter Subscription**\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "MongoDB Object ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Change Password",
                    "required": [
                      "type",
                      "newPassword"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "change_password"
                        ]
                      },
                      "newPassword": {
                        "type": "string",
                        "format": "password",
                        "description": "User password.\n\nA valid password is:\n- Between 8 and 64 symbols long (both inclusive);\n- Contains at least one lowercase (a-z) and uppercase (A-Z) letter;\n- Contains at least one digit (0-9);\n- Contains at least one of these symbols:\n  ```\n  `~!@#$%^&*()-_=+[{}]\\|;:'\",<.>/?€£¥₹\n  ```\n- Does not contain whitespaces.\n\nThese rules are validated by\n[password-validator](https://www.npmjs.com/package/password-validator)\nusing the following schema:\n```js\nconst MIN_PASSWORD_LENGTH = 8;\nconst MAX_PASSWORD_LENGTH = 64;\nconst passwordSchema = new PasswordValidator();\n  passwordSchema\n    .is().min(MIN_PASSWORD_LENGTH)\n    .is().max(MAX_PASSWORD_LENGTH)\n    .has().uppercase()\n    .has().lowercase()\n    .has().digits()\n    .has().symbols()\n    .has().not().spaces();\n```\n"
                      },
                      "resetCode": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Optional. Password reset code, issued by a previous call to\n[POST /users/password-recovery](#operation/registerUser). When provided,\nauthentication is not required by this action.\n"
                      },
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "User password.\n\nA valid password is:\n- Between 8 and 64 symbols long (both inclusive);\n- Contains at least one lowercase (a-z) and uppercase (A-Z) letter;\n- Contains at least one digit (0-9);\n- Contains at least one of these symbols:\n  ```\n  `~!@#$%^&*()-_=+[{}]\\|;:'\",<.>/?€£¥₹\n  ```\n- Does not contain whitespaces.\n\nThese rules are validated by\n[password-validator](https://www.npmjs.com/package/password-validator)\nusing the following schema:\n```js\nconst MIN_PASSWORD_LENGTH = 8;\nconst MAX_PASSWORD_LENGTH = 64;\nconst passwordSchema = new PasswordValidator();\n  passwordSchema\n    .is().min(MIN_PASSWORD_LENGTH)\n    .is().max(MAX_PASSWORD_LENGTH)\n    .has().uppercase()\n    .has().lowercase()\n    .has().digits()\n    .has().symbols()\n    .has().not().spaces();\n```\n"
                      },
                      "username": {
                        "type": "string",
                        "description": "User identifier. Can be either of:\n- User Ethereum address;\n- A verified user email;\n- MythX user ID.\n"
                      },
                      "ethAddress": {
                        "deprecated": true,
                        "type": "string",
                        "description": "An alias of `username` for backward compatibility."
                      },
                      "userId": {
                        "deprecated": true,
                        "type": "string",
                        "description": "An alias of `username` for backward compatibility."
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Init Email Verification",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "email_verification_init"
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Update User Details",
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "update_user_details"
                        ]
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "New email. Must be unique among all users, and different from the\ncurrent user email.\n"
                      },
                      "label": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Optional label, visible to the user, and editable by the user. It is also exposed to the users created by this user as `creatorLabel` field in their user objects."
                      },
                      "ownerPartnerId": {
                        "type": "string",
                        "format": "MongoDB ObjectID",
                        "description": "ID of the partner account associated with this user. Analyses executed by\nthe newly created user will be counted for that parnter for billing and\nbook-keeping purposes.\n\nRequires `SET_USER_OWNER_PARNTER_ID` permission to set.\n"
                      },
                      "privateLabel": {
                        "type": "string",
                        "maxLength": 256,
                        "description": "Optional label, invisible to the user. This label is only visible to, and editable by MythX admins, and also to users up in the user tree (i.e. those who created this user, those who created them, etc.)"
                      },
                      "subscriptionId": {
                        "type": "string",
                        "description": "ID of Daisy subscription ID, if any."
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Update User Preferences",
                    "required": [
                      "type",
                      "preferences"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "update_preferences"
                        ],
                        "description": "This action updates user preferences.\n\nIgnore default values specified in the descriptions of `preferences`\nfields, those apply only for registration of new users. In case of the\nupdate, any preference not present in the request will keep its original\nvalue.\n"
                      },
                      "preferences": {
                        "type": "object",
                        "title": "User Preferences",
                        "description": "Generic user preferences.",
                        "properties": {
                          "newsletter": {
                            "type": "boolean",
                            "default": false,
                            "description": "`true` if user wants to receive newsletters, `false` otherwise.\n"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns user profile object when appropriate, empty response, otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "User ID."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date",
                      "description": "User registration timestamp."
                    },
                    "createdBy": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "If this user has been created by another user, this field holds creator's user ID. Otherwise it is `null`."
                    },
                    "createdByPartner": {
                      "type": "boolean",
                      "description": "`true` if this user has been created by a partner, `false` otherwise.\n"
                    },
                    "creatorLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "default": "",
                      "description": "If this user has been created by another user, this field will contain the value of creator's `label` field."
                    },
                    "email": {
                      "type": "object",
                      "description": "User email and related information.",
                      "properties": {
                        "address": {
                          "type": "string",
                          "format": "email",
                          "description": "Email address."
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "A flag specifying whether the currently set email address has been verified."
                        }
                      }
                    },
                    "ethAddress": {
                      "type": "string",
                      "format": "Ethereum address",
                      "description": "Ethereum address."
                    },
                    "label": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Optional label, visible to the user, and editable by the user. It is also exposed to the users created by this user as `creatorLabel` field in their user objects."
                    },
                    "mustChangePassword": {
                      "type": "boolean",
                      "description": "Indicates that user must change password before he will be allowed to use\nmost of API functionality.\n"
                    },
                    "ownerPartnerId": {
                      "type": "string",
                      "format": "MongoDB ObjectID",
                      "description": "User ID of the partner responsible over this account, if any. The value\nof this field is used to aggregate usage stats of end-user accounts\nrelated to each partner, for partner billing, and book-keeping purposes.\n- For user accounts created by partners themselves, this value is force\n  set equal to the partner ID, thus it is equal to `createdBy` value;\n- When a MythX admin creates an account to pass it to a partner,\n  the admin is responsible to set the correct partner ID here.\n"
                    },
                    "ownerPartnerLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "default": "",
                      "description": "If this user account is owned by a partner, this field will contain the value of partner's `label` field."
                    },
                    "privateLabel": {
                      "type": "string",
                      "maxLength": 256,
                      "description": "Optional label, invisible to the user. This label is only visible to, and editable by MythX admins, and also to users up in the user tree (i.e. those who created this user, those who created them, etc.)"
                    },
                    "preferences": {
                      "type": "object",
                      "title": "User Preferences",
                      "description": "Generic user preferences.",
                      "properties": {
                        "newsletter": {
                          "type": "boolean",
                          "default": false,
                          "description": "`true` if user wants to receive newsletters, `false` otherwise.\n"
                        }
                      }
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The following user roles exist in MythX plaform as of now:\n\n- `admin` - Gives all possible permissions. It is only intended for core\n  members of MythX team.\n\n- `Free` - Gives permission for regular API usage. Currently it\n  means the allowance to send up to 1k analyses in any 24h period.\n\n- `partner` - Gives permission to create new privileged and regular users.\n\n- `Professional` - Currently not in use. Will take the current `Free` role's\n  permissions after the launch, and decrease of `Free` role allowances.\n\n- `Premium` - Gives permission for premium API usage. Currently it\n  means the allowance to send up to 10k analyses in any 24h period. Mind that\n  currently there is an additional limit for everybody: at most 100\n  non-finished analyses per user at any time.\n\n- `shared_user` - Gives permission to expirience all usage limits on per-IP\n  basis. This is intended for trial users only.\n\n- `trusted_user` - Gives permission to fetch internal platform usage \n  statistics.\n"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "description": "ID of Daisy subscription ID, if any."
                    },
                    "termsId": {
                      "type": "string",
                      "description": "ID of terms the user has agreed to.",
                      "default": "no_terms",
                      "enum": [
                        "no_terms",
                        "standard_terms_v1.0.0"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/permissions": {
      "get": {
        "operationId": "getUserPermissions",
        "summary": "User Permissions",
        "tags": [
          "User Accounts"
        ],
        "security": [
          {
            "JWT": []
          },
          {
            "MetaMask": []
          }
        ],
        "description": "Returns the array of permissions given to the specified user by his roles. For\nthe current user and JWT session the actual permissions can be narrowed down\nat the time of session initiation, the endpoint\n[GET /auth/permissions](#operation/getSessionPermissions)\nreturns the array of permissions granted for the current user session.\n\nSee also [User Roles and Permissions](#section/User-Roles-and-Permissions).\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ANALYSIS_ALLOWANCE_MINIMAL",
                      "ANALYSIS_ALLOWANCE_PREMIUM",
                      "ANALYSES_LOOKUP_OWN",
                      "CHANGE_PASSWORD_OWN",
                      "CREATE_USERS_ADMIN",
                      "CREATE_USERS_FREE",
                      "CREATE_USERS_PARTNER",
                      "CREATE_USERS_PREMIUM",
                      "CREATE_USERS_PROFESSIONAL",
                      "CREATE_USERS_TRUSTED",
                      "CREATE_USERS_WITHOUT_ROLES",
                      "PARALLEL_ANALYSIS_REQUESTS_UNLIMITED",
                      "REQUEST_RATE_PER_IP",
                      "USER_LOOKUP",
                      "USERS_ANALYSES_STATS_LOOKUP"
                    ]
                  },
                  "description": "User permissions. For details see\n[User Roles and Permission](#section/User-Roles-and-Permissions).\n"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request &mdash; Probably an ill-formed request. See `error`\nmessage for details.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 400,
                  "error": "Bad request; please check your body schema:\n * field \"field1\" is not allowed to be empty,\n * field \"field2\" must be a positive integer,\n ..."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden &mdash; Request is not allowed to the authenticated user due to\na lack of permissions.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 403,
                  "error": "Forbidden"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/openapi": {
      "get": {
        "operationId": "getOpenApiHtml",
        "tags": [
          "Miscellaneous"
        ],
        "summary": "OpenAPI specs (HTML)",
        "description": "Gets OpenAPI specification of MythX API, in HTML format.",
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/html": {
                "schema": {
                  "type": "string",
                  "description": "OpenAPI specification of MythX API."
                },
                "example": "HTML document with OpenAPI specification for MythX API\n"
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/openapi.yaml": {
      "get": {
        "operationId": "getOpenApiYaml",
        "tags": [
          "Miscellaneous"
        ],
        "summary": "OpenAPI specs (YAML)",
        "description": "Gets OpenAPI specification of MythX API, in YAML format.",
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/yaml": {
                "schema": {
                  "type": "string",
                  "description": "OpenAPI specification of MythX API."
                },
                "example": "YAML document with OpenAPI specification for MythX API\n"
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/stats/{type}": {
      "get": {
        "tags": [
          "Miscellaneous"
        ],
        "operationId": "usersAnalysesStats",
        "summary": "API Stats",
        "description": "Serves real-time and historic statistics on API usage. The heavy-lifting\ncalculation of stats is done continiously by a background API thread, and\nthe results are stored to the database. This endpoint just looks up for\nrequested records already existing in the database, and returns up to 25\nof them (pagination is supported). Results are sorted and served\nchronologically from the most recent to the oldest ones.\n\nFor most of the time API will keep all statistics fresh, outdated at most by\n~1 minute from the current moment. Larger lags are possible when a newly\ndeployed API version triggers re-evaluation of past statistics. In that case\nthe real-time updates of recent stats are paused until the re-evaluation is\ncompleted. By design, this does not cause any data loses.\n",
        "security": [
          {
            "JWT": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "users-analyses"
              ],
              "description": "The type of stats to return.\n\n- `users-analyses` - generic stats on users and analyses that are\n  deduces mostly from scanning _analyses_ collection in API database.\n  Users MUST have `STATS_LOOKUP.USERS_ANALYSES` permission to fetch\n  these stats.\n"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "LIFE_TIME",
                "ONE_YEAR",
                "ONE_MONTH",
                "ONE_DAY",
                "ONE_HOUR",
                "FIVE_MINUTES"
              ],
              "default": "LIFE_TIME",
              "description": "Stats interval, i.e the time range covered by a single record in\nthe response. In other words, requesting `ONE_DAY` stats you will get\nan array of objects, each describing a single day. Other values are\nself-explanatory.\n\nFor a reasonalbe use of database space, daily stats are available for\n~3 last years, hourly stats for ~1 last month, five-minutes stats for\n~3 last days.\n"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Filters requested statistics records by their interval start,\ni.e. all returned objects will describe intervals starting after\n`from` timestamp.\n"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Filters requested statistics records by their interval starts,\ni.e. all returned objects will describe intervals starting prior\n`to` timestamp.\n"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "int",
              "description": "Response pagination: the specified number of records will be omitted\nfrom the response (matching records in the response are sorted\nchronologically from the most recent to the oldest).\n"
            }
          },
          {
            "name": "minRevision",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "int",
              "description": "Specifies the minimal revision number of stat records that may be\nincluded into the response. See description of response format for\nthe meaning of _revision_ number. In practice, statistics records of\nthe same type and with different revisions may co-exist only shortly\nafter an API redeployment that caused re-evaluation of past stats\ndata. Once re-evaluation is completed, all existing records of that\ntype end up updated to the latest revision.\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "users-analyses type",
                  "items": {
                    "type": "object",
                    "properties": {
                      "from": {
                        "type": "string",
                        "format": "date",
                        "description": "Start of the interval described by this statistics object.\n"
                      },
                      "interval": {
                        "type": "string",
                        "enum": [
                          "LIFE_TIME",
                          "ONE_YEAR",
                          "ONE_MONTH",
                          "ONE_DAY",
                          "ONE_HOUR",
                          "FIVE_MINUTES"
                        ],
                        "description": "Length of the interval described by this statistics object.\nEnd of the interval is either `from + interval`, or\n`createdAt` (see below).\n"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date",
                        "description": "The last time this statistics object was updated. This\ntimestamp can be before `from + interval` which means that\nthe interval has not finished yet, and the object represents\nthe most recent data for interval, that will be updated,\ntypically once per minute. Once `createdAt` is after\n`from + interval` the object represents the final values\nfor that interval, that may only be re-evaluated later\nif a new API version introduces a new revision (see below)\nfor statistics of that `type` (see below).\n"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "USERS_ANALYSES"
                        ],
                        "description": "Type of statistics held by this object, i.e. describes\npayload type of `data` object field (see below).\n"
                      },
                      "revision": {
                        "type": "number",
                        "description": "Revision of statistics data aggregated into this object.\nStatistics data of each `type` has independent revision\nnumbers, which are integer values that are typically\nincremented each by 1 each time any changes are introduced\ninto calculation logic behind these stats. Update of the\nrevision number causes an automatic re-evaluation of all\nexisting statistics of that `type` right after API\nre-deployment. Until the re-evaluation is completed,\nthe objects with previous revision(s) and the new\nrevision may co-exist in the database, and in the\nAPI responses. A client may use `minRevision` query\nparameter, if it need to guarantee that only fresh\nrevisions are included into the response.\n"
                      },
                      "data": {
                        "description": "The actual statistics payload that describes the interval\nstaring from the timestamp `from` and ending at the time\n`from + interval`, or `createdAt`, whatever is the earliest.\nThe actual format of this object is defined by the `type`\nfield (see above).\n",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "USERS_ANALYSES Stats",
                            "description": "Holds general statistics on users and analyses.\n",
                            "properties": {
                              "numUsers": {
                                "type": "object",
                                "description": "Different user counts: number of active and trial users, number of newly\nregistered users, total amount of registered users, etc.\n",
                                "properties": {
                                  "registered": {
                                    "type": "object",
                                    "description": "Stats on the number of registered users:\n- The number of new users registered within the interval;\n- The total number of registered users at the interval end;\n- The average number of registered users active in a 5 minutes,\n  one hour, one day, and one month periods within the interval.\n",
                                    "properties": {
                                      "total": {
                                        "type": "number",
                                        "description": "The total number of registered users at the interval end.\n"
                                      },
                                      "new": {
                                        "type": "number",
                                        "description": "The number of new users registered within the interval.\n"
                                      },
                                      "activeIn5min": {
                                        "type": "number",
                                        "description": "The average number of active users in a five-minutes time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than five\nminutes, the value equals to the number of active users in that interval.\n"
                                      },
                                      "activeInHour": {
                                        "type": "number",
                                        "description": "The average number of active users in a one hour time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one hour,\nthe value equals to the number of active users in that interval.\n"
                                      },
                                      "activeInDay": {
                                        "type": "number",
                                        "description": "The average number of active users in a one day time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one day,\nthe value equals to the number of active users in that interval.\n"
                                      },
                                      "activeInMonth": {
                                        "type": "number",
                                        "description": "The average number of active users in a one month time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one month,\nthe value equals to the number of active users in that interval.\n"
                                      }
                                    }
                                  },
                                  "trial": {
                                    "type": "object",
                                    "description": "Stats on the number of trial users:\n- The average number of trial users active in a 5 minutes, one hour,\n  one day, and one month periods within the interval.\n",
                                    "properties": {
                                      "activeIn5min": {
                                        "type": "number",
                                        "description": "The average number of active users in a five-minutes time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than five\nminutes, the value equals to the number of active users in that interval.\n"
                                      },
                                      "activeInHour": {
                                        "type": "number",
                                        "description": "The average number of active users in a one hour time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one hour,\nthe value equals to the number of active users in that interval.\n"
                                      },
                                      "activeInDay": {
                                        "type": "number",
                                        "description": "The average number of active users in a one day time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one day,\nthe value equals to the number of active users in that interval.\n"
                                      },
                                      "activeInMonth": {
                                        "type": "number",
                                        "description": "The average number of active users in a one month time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one month,\nthe value equals to the number of active users in that interval.\n"
                                      }
                                    }
                                  },
                                  "byClientTool": {
                                    "type": "object",
                                    "description": "Stats on the number of users with different roles who submitted\nanalyses within the interval using different client tools.\n`CLIENT_TOOL` below is used as a placeholder for a client tool name.\n",
                                    "properties": {
                                      "CLIENT_TOOL": {
                                        "type": "object",
                                        "description": "Stats on users who submitted analyses using the `CLIENT_TOOL`.\n",
                                        "properties": {
                                          "premium": {
                                            "type": "object",
                                            "description": "Average numbers of active premium users who submitted within\nthe interval at least a single analysis using\nthe `CLIENT_TOOL`.\n",
                                            "properties": {
                                              "activeIn5min": {
                                                "type": "number",
                                                "description": "The average number of active users in a five-minutes time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than five\nminutes, the value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInHour": {
                                                "type": "number",
                                                "description": "The average number of active users in a one hour time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one hour,\nthe value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInDay": {
                                                "type": "number",
                                                "description": "The average number of active users in a one day time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one day,\nthe value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInMonth": {
                                                "type": "number",
                                                "description": "The average number of active users in a one month time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one month,\nthe value equals to the number of active users in that interval.\n"
                                              }
                                            }
                                          },
                                          "professional": {
                                            "type": "object",
                                            "description": "Average numbers of active professional, and non-premium,\nusers who submitted within the interval at least a single\nanalysis using the `CLIENT_TOOL`.\n",
                                            "properties": {
                                              "activeIn5min": {
                                                "type": "number",
                                                "description": "The average number of active users in a five-minutes time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than five\nminutes, the value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInHour": {
                                                "type": "number",
                                                "description": "The average number of active users in a one hour time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one hour,\nthe value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInDay": {
                                                "type": "number",
                                                "description": "The average number of active users in a one day time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one day,\nthe value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInMonth": {
                                                "type": "number",
                                                "description": "The average number of active users in a one month time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one month,\nthe value equals to the number of active users in that interval.\n"
                                              }
                                            }
                                          },
                                          "others": {
                                            "type": "object",
                                            "description": "Average numbers of active non-premium, and non-professional,\nusers who submitted within the interval at least a single\nanalysis using the `CLIENT_TOOL`.\n",
                                            "properties": {
                                              "activeIn5min": {
                                                "type": "number",
                                                "description": "The average number of active users in a five-minutes time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than five\nminutes, the value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInHour": {
                                                "type": "number",
                                                "description": "The average number of active users in a one hour time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one hour,\nthe value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInDay": {
                                                "type": "number",
                                                "description": "The average number of active users in a one day time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one day,\nthe value equals to the number of active users in that interval.\n"
                                              },
                                              "activeInMonth": {
                                                "type": "number",
                                                "description": "The average number of active users in a one month time period within\nthe interval. A user is counted active if he has submitted at least a single\nanalysis request within the interval. If interval is shorted than one month,\nthe value equals to the number of active users in that interval.\n"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "numAnalyses": {
                                "type": "object",
                                "description": "Different counts of submitted, finished, failed analyses, etc.\n",
                                "properties": {
                                  "requested": {
                                    "type": "object",
                                    "description": "Counts of requested analyses.",
                                    "properties": {
                                      "total": {
                                        "type": "number",
                                        "description": "The total number of ever requested analyses, from the beginning of MythX era till the interval end."
                                      },
                                      "new": {
                                        "type": "number",
                                        "description": "The number of new analyses requested within the interval."
                                      }
                                    }
                                  },
                                  "cacheHits": {
                                    "type": "object",
                                    "description": "Counts of analyses served from the cache.",
                                    "properties": {
                                      "total": {
                                        "type": "number",
                                        "description": "The total number of analyses ever served from the cache, i.e. right after submission API detected that the same inputs were already analysed with the same tool versions for the same or different users, thus it just serves the same results right away, without invoking the actual analysis."
                                      },
                                      "new": {
                                        "type": "number",
                                        "description": "The number of analyses served from the cache within the interval."
                                      }
                                    }
                                  },
                                  "failed": {
                                    "type": "object",
                                    "description": "Counts of failed analyses.",
                                    "properties": {
                                      "total": {
                                        "type": "number",
                                        "description": "The total number of ever failed analyses at the interval end."
                                      },
                                      "new": {
                                        "type": "number",
                                        "description": "The number of analyses failed within the interval."
                                      },
                                      "inProgress": {
                                        "type": "object",
                                        "description": "Counts of analyses failed while in the _In Progress` state.",
                                        "properties": {
                                          "total": {
                                            "type": "number",
                                            "description": "The total number of analyses, at the interval end, ever failed while in _In Progress_ state."
                                          },
                                          "new": {
                                            "type": "number",
                                            "description": "The number of analyses failed within the interval while in the _In Progress_ state."
                                          }
                                        }
                                      },
                                      "inQueue": {
                                        "type": "object",
                                        "description": "Counts of analyses failed while in queue, i.e. after they have been received by API, but before API received and stored the confirmation from Maestro about starting the analysis.",
                                        "properties": {
                                          "total": {
                                            "type": "number",
                                            "description": "The total number of analyses, at the interval end, ever failed while being in the queue."
                                          },
                                          "new": {
                                            "type": "number",
                                            "description": "The number of analyses failed within the interval, while being in the queue."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "finished": {
                                    "type": "object",
                                    "description": "Counts of successfully finished analyses, i.e. those that have not been served from cache, and have not failed.",
                                    "properties": {
                                      "total": {
                                        "type": "number",
                                        "description": "The total number of ever completed analyses."
                                      },
                                      "new": {
                                        "type": "number",
                                        "description": "The number of analyses successfully completed within the interval."
                                      }
                                    }
                                  },
                                  "queued": {
                                    "type": "object",
                                    "description": "Counts of queued analyses.",
                                    "properties": {
                                      "total": {
                                        "type": "number",
                                        "description": "The total number of analyses queued at the interval end. Note, unlike other `total` fields, this one does not count all analyses even been to the queue, but analyses that were in the queue exactly at the end of the interval."
                                      },
                                      "average": {
                                        "type": "number",
                                        "description": "The average number of queued analyses at any time within\nthe interval. For computational efficiency, for intervals\nunder five minutes it is just set equal to the `total` (above)\nqueue size at the current interval end, for larger intervals\nthis value is estimated based on the total queue size at the\nend of each 5-minutes sub-interval.\n"
                                      },
                                      "new": {
                                        "type": "number",
                                        "description": "The number of analyses added to the queue within the interval."
                                      }
                                    }
                                  },
                                  "inProgress": {
                                    "type": "object",
                                    "description": "Counts of running analyses.",
                                    "properties": {
                                      "total": {
                                        "type": "number",
                                        "description": "The total number of analyses being in progress at the interval end. Note, unlike other `total` fields, this one does not count all analyses even been in the _In Progress_ state, but it counts the actual number of analyses that were _In Progress_ at the interval end."
                                      },
                                      "average": {
                                        "type": "number",
                                        "description": "The average number of in progress analyses at any time within\nthe interval. For computational efficiency, for intervals\nunder five minutes it is just set equal to the `total` (above)\nnumber of analyses in progress at the current interval end, for\nlarger intervals this value is estimated based on the total queue\nsize at the end of each 5-minutes sub-interval.\n"
                                      },
                                      "new": {
                                        "type": "number",
                                        "description": "The number of analyses started by Maestro within the interval."
                                      }
                                    }
                                  },
                                  "byClientTool": {
                                    "type": "object",
                                    "description": "Counts of analyses by client tools used to submit them to the API. Each field in this object is a tool name (`TOOLNAME` is used below as an example).",
                                    "properties": {
                                      "TOOLNAME": {
                                        "type": "object",
                                        "description": "Counts of analyses submitted using the `TOOLNAME` client tool.",
                                        "properties": {
                                          "total": {
                                            "type": "number",
                                            "description": "The total number of analyses ever submitted by `TOOLNAME` client tool, as at the interval end."
                                          },
                                          "new": {
                                            "type": "number",
                                            "description": "The number of analyses submitted within the interval using the `TOOLNAME` client tool."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "byOwnerPartnerId": {
                                    "type": "object",
                                    "description": "Counts of analyses submitted by user accounts \"owned\" by a partner, in the sence that the partner is to be charged for API usage by these accounts. (`PARNTER_ID` below is a placeholder for a sample user ID).",
                                    "properties": {
                                      "PARTNER_ID": {
                                        "type": "object",
                                        "description": "Counts of analyses submitted by accounts owned by (billed to) the partner with `PARTNER_ID`.",
                                        "properties": {
                                          "requested": {
                                            "type": "object",
                                            "description": "The counts of requested analyses.",
                                            "properties": {
                                              "total": {
                                                "type": "number",
                                                "description": "The total number of analyses requested by the stats interval end."
                                              },
                                              "new": {
                                                "type": "number",
                                                "description": "The number of analyses requested within the stats interval."
                                              }
                                            }
                                          },
                                          "cacheHits": {
                                            "type": "object",
                                            "description": "The counts of analyses served from the cache.",
                                            "properties": {
                                              "total": {
                                                "type": "number",
                                                "description": "The total number at the stats interval end."
                                              },
                                              "new": {
                                                "type": "number",
                                                "description": "The number within the stats interval."
                                              }
                                            }
                                          },
                                          "queued": {
                                            "type": "object",
                                            "description": "The counts of analyses sent to the backend queue.",
                                            "properties": {
                                              "new": {
                                                "type": "number",
                                                "description": "The number of analyses sent to execution within the stats interval."
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "byUserType": {
                                    "type": "object",
                                    "description": "Counts of requested analyses by the type of users who submitted them.",
                                    "properties": {
                                      "registered": {
                                        "type": "object",
                                        "description": "Counts of analyses submitted by registered users.",
                                        "properties": {
                                          "total": {
                                            "type": "number",
                                            "description": "The total count of analyses ever submitted by registered users, at the interval end."
                                          },
                                          "new": {
                                            "type": "number",
                                            "description": "The number of analyses submitted by registered users within the interval."
                                          }
                                        }
                                      },
                                      "trial": {
                                        "type": "object",
                                        "description": "Counts of analyses submitted by trial users.",
                                        "properties": {
                                          "total": {
                                            "type": "number",
                                            "description": "The total count of analyses ever submitted by trial users, at the interval end."
                                          },
                                          "new": {
                                            "type": "number",
                                            "description": "The number of analysese submitted by trial users within the interval."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "analysis": {
                                "type": "object",
                                "description": "Different stats about analyses: average and maximum queue and runtime,\n  etc.\n",
                                "properties": {
                                  "time": {
                                    "type": "object",
                                    "description": "Average and maximum queue and runtime of analyses.\n",
                                    "properties": {
                                      "queue": {
                                        "type": "object",
                                        "description": "Average and maximum queue time of analyses, i.e. the time from an analysis request to the moment it was started by Maestro. Analyses served from the cache are not included here (they have zero queue time, and are not counted here).",
                                        "properties": {
                                          "av": {
                                            "type": "number",
                                            "description": "The average analysis queue time (seconds) within the interval."
                                          },
                                          "max": {
                                            "type": "number",
                                            "description": "The maximum analysis queue time (seconds) within the interval."
                                          },
                                          "avMin": {
                                            "type": "number",
                                            "description": "The average analysis queue time (minutes) within the interval, i.e. the same as `av` above, but converted to minutes for convenience of reading."
                                          },
                                          "maxMin": {
                                            "type": "number",
                                            "description": "The maximum analysis queue time (minutes) within the interval, i.e.e the same as `max` above, but converted to minutes for convenience."
                                          }
                                        }
                                      },
                                      "av": {
                                        "type": "number",
                                        "description": "The average full time (seconds) of an analysis within the interval, i.e. the full time from analysis request till when its results are ready. Analyses served from cache are not included into this average (for them the total runtime is zero)."
                                      },
                                      "max": {
                                        "type": "number",
                                        "description": "The maximum full time (seconds) of an analysis within the interval."
                                      },
                                      "avMin": {
                                        "type": "number",
                                        "description": "The average full time (minutes) of an analysis within the interval. The same as `av` above, but converted to minutes."
                                      },
                                      "maxMin": {
                                        "type": "number",
                                        "description": "The maximum full time (minutes) of an analysis within the interval. The same as `max` above, but converted to minutes."
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "example": [
                    {
                      "from": "2018-01-01T00:00:00.000Z",
                      "interval": "LIFE_TIME",
                      "createdAt": "2019-03-31T22:09:27.684Z",
                      "type": "USERS_ANALYSES",
                      "revision": 9,
                      "data": {
                        "numUsers": {
                          "registered": {
                            "total": 371,
                            "new": 371,
                            "activeIn5min": 0.21033004972474095,
                            "activeInHour": 2.523960596696891,
                            "activeInDay": 60.55527076341195
                          },
                          "trial": {
                            "activeIn5min": 0.004182634802378998,
                            "activeInHour": 0.05019161762854797,
                            "activeInDay": 1.1452481511448245
                          }
                        },
                        "numAnalyses": {
                          "requested": {
                            "total": 146861,
                            "new": 146861
                          },
                          "cacheHits": {
                            "total": 38015,
                            "new": 38015
                          },
                          "failed": {
                            "total": 4310,
                            "new": 4310,
                            "inProgress": {
                              "total": 4272,
                              "new": 4272
                            },
                            "inQueue": {
                              "total": 38,
                              "new": 38
                            }
                          },
                          "finished": {
                            "total": 104533,
                            "new": 104533
                          },
                          "queued": {
                            "total": 0,
                            "new": 108846
                          },
                          "inProgress": {
                            "total": 3,
                            "new": 108808
                          },
                          "byUserType": {
                            "registered": {
                              "total": 122313,
                              "new": 122313
                            },
                            "trial": {
                              "total": 24548,
                              "new": 24548
                            }
                          }
                        },
                        "analysis": {
                          "time": {
                            "queue": {
                              "av": "164113.69278836806,",
                              "max": "20303,",
                              "avMin": "2.7352282131394676,",
                              "maxMin": 0.3383833333333333
                            },
                            "av": "215796.1882000488,",
                            "max": "65806,",
                            "avMin": "3.59660313666748,",
                            "maxMin": 1.0967666666666667
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized &mdash; Probably an empty or invalid authorization header sent\nwith the request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 401,
                  "error": "Not authenticated; please log in and try again"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error &mdash; An unexpected error happened at the server\nside when trying to fulfil your request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 500,
                  "error": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "operationId": "getVersion",
        "tags": [
          "Miscellaneous"
        ],
        "summary": "API version",
        "description": "Gets current versions of MythX API and its core sub-modules.",
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "api": {
                      "type": "string",
                      "format": "semver",
                      "description": "Main version of the API as a whole."
                    },
                    "hash": {
                      "type": "string",
                      "format": "md5",
                      "description": "MD5 hash of all API component versions."
                    },
                    "harvey": {
                      "type": "string",
                      "format": "semver",
                      "description": "Version of Harvey API module."
                    },
                    "maru": {
                      "type": "string",
                      "format": "semver",
                      "description": "Version of Maru API module."
                    },
                    "mythril": {
                      "type": "string",
                      "format": "semver",
                      "description": "Version of Mythril API module."
                    },
                    "maestro": {
                      "deprecated": true,
                      "type": "string",
                      "format": "semver",
                      "description": "Version of Maestro API module."
                    }
                  }
                },
                "example": {
                  "api": "v1.2.5",
                  "hash": "c0d8ccbf9ba2623cc147da2860f20093",
                  "harvey": "v0.1.0",
                  "maru": "0.1.0",
                  "mythril": "v1.2.3"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests &mdash; You have either reached the API usage limit allowed to\nyour user and subscription types or the maximum request allowed per client and\nsecond.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code."
                    },
                    "error": {
                      "type": "string",
                      "description": "Human-readable error message."
                    }
                  }
                },
                "example": {
                  "status": 429,
                  "error": "Exceeded plan limit: 10,000 requests in a day; limit will reset in a day;\n Exceeded usage limit; please try again in 24H or upgrade your plan"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "JWT": {
        "type": "http",
        "description": "The JSON Web Tokens authentication works this way:\n- Use [POST /auth/login](#operation/login) to generate a pair of JWT access\n  and refresh tokens, and thus to start a JWT session.\n- To authenticate following API calls pass the access token, prefixed by\n  `Bearer` label, inside the request's `Authorization` header; e.g.\n  `Authorization`: `Bearer JWT_ACCESS_TOKEN`.\n- Access tokens are valid for ten minutes. To check a token's expiration\n  timestamp decode the token, and check its `exp` value. Use\n  [POST /auth/refresh](#operation/loginRefresh) to refresh a JWT pair.\n  Refresh tokens have one month expiration time.\n- To invalidate active JWT pair, and thus to terminate a JWT session\n  use [POST /auth/logout](#operation/logout).\n",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "MetaMask": {
        "type": "http",
        "description": "Authentication scheme for [MetaMask](https://metamask.io/).\n\n- Get authentication challenge with\n  [GET /auth/challenge](#operation/getAuthChallenge);\n- Sign it with MetaMask;\n- Pass the signed message via the **Authorization** HTTP header of the\n  next request to a protected API endpoint. The header value must follow\n  the format `MetaMask SIGNED_CHALLENGE`.\n",
        "scheme": "digest"
      }
    }
  }
}